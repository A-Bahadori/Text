string dllPath = compilerResults.PathToAssembly;
                string pdbPath = Path.ChangeExtension(dllPath, ".pdb");
                Console.WriteLine($"Assembly saved to: {dllPath}");

                // 5. ایجاد AppDomain جدید
                var domainSetup = new AppDomainSetup
                {
                    ApplicationBase = AppDomain.CurrentDomain.BaseDirectory,
                    ShadowCopyFiles = "true", // جلوگیری از قفل فایل
                    CachePath = Path.Combine(Path.GetTempPath(), "ShadowCopyCache")
                };

                var appDomain = AppDomain.CreateDomain("DynamicDomain", null, domainSetup);

                try
                {
                    // 6. ایجاد Proxy در AppDomain جدید
                    var proxy = (DomainProxy)appDomain.CreateInstanceAndUnwrap(
                        typeof(DomainProxy).Assembly.FullName,
                        typeof(DomainProxy).FullName);

                    // 7. اجرای متد و دریافت خطا
                    Exception runtimeError = proxy.ExecuteMethod(dllPath, "DynamicCode.Calculator", "Divide", new object[] { 10, 0 });

                    if (runtimeError != null)
                    {
                        Console.WriteLine("\nRuntime Error Details:");
                        Console.WriteLine($"Message: {runtimeError.Message}");

                        // استخراج جزئیات خطای دقیق
                        StackTrace stackTrace = new StackTrace(runtimeError, true);
                        foreach (StackFrame frame in stackTrace.GetFrames())
                        {
                            Console.WriteLine($"\nMethod: {frame.GetMethod().DeclaringType}.{frame.GetMethod().Name}");
                            Console.WriteLine($"File: {frame.GetFileName()}");
                            Console.WriteLine($"Line: {frame.GetFileLineNumber()}");
                        }
                    }
                }
                finally
                {
                    // 8. Unload کردن AppDomain
                    AppDomain.Unload(appDomain);
                }



 public class DomainProxy : MarshalByRefObject
    {
        public Exception ExecuteMethod(string assemblyPath, string typeName, string methodName, object[] parameters)
        {
            try
            {
                // بارگذاری اسمبلی
                Assembly assembly = Assembly.LoadFrom(assemblyPath);
                Type type = assembly.GetType(typeName);
                MethodInfo method = type.GetMethod(methodName);
                object instance = Activator.CreateInstance(type);

                // اجرای متد
                method.Invoke(instance, parameters);
                return null;
            }
            catch (Exception ex)
            {
                // بازگرداندن خطا به AppDomain اصلی
                return ex.InnerException ?? ex;
            }
        }
    }
