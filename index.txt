using System;
using System.Reflection;

class Program
{
    static void Main()
    {
        // دریافت نوع یک کلاس
        Type type = typeof(Person);
        
        // نمایش نام کلاس
        Console.WriteLine($"نام کلاس: {type.Name}");
        
        // نمایش تمام پراپرتی‌های کلاس
        Console.WriteLine("\nپراپرتی‌ها:");
        PropertyInfo[] properties = type.GetProperties();
        foreach (PropertyInfo property in properties)
        {
            Console.WriteLine($"- {property.Name}: {property.PropertyType.Name}");
        }
        
        // نمایش تمام متدهای کلاس
        Console.WriteLine("\nمتدها:");
        MethodInfo[] methods = type.GetMethods();
        foreach (MethodInfo method in methods)
        {
            Console.WriteLine($"- {method.Name}");
        }
        
        // ایجاد نمونه جدید با استفاده از Reflection
        Console.WriteLine("\nایجاد نمونه جدید:");
        object personInstance = Activator.CreateInstance(type);
        
        // تنظیم مقدار پراپرتی با استفاده از Reflection
        PropertyInfo nameProperty = type.GetProperty("Name");
        nameProperty.SetValue(personInstance, "علی");
        
        // فراخوانی متد با استفاده از Reflection
        MethodInfo greetMethod = type.GetMethod("Greet");
        greetMethod.Invoke(personInstance, null);
    }
}

class Person
{
    public string Name { get; set; }
    public int Age { get; set; }
    
    public void Greet()
    {
        Console.WriteLine($"سلام، اسم من {Name} است!");
    }
    
    public void Introduce()
    {
        Console.WriteLine($"من {Name} هستم و {Age} سال دارم.");
    }
}
