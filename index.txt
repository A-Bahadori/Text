using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using Gurock.SmartInspect;

namespace SmartInspectSample
{
    // کلاس مدیریت لاگر با استفاده از الگوی Singleton
    public static class SILogger
    {
        private static readonly SmartInspect _si;
        private static readonly Session _session;
        
        static SILogger()
        {
            _si = new SmartInspect("SILogger");
            
            // تنظیمات پیش‌فرض
            _si.Connections = "file(filename=\"C:\\Logs\\AppLog.sil\", rotate=daily)";
            _si.Level = Level.Debug;
            _si.Enabled = true;
            
            _session = _si.AddSession("Main");
        }
        
        public static Session MainSession
        {
            get { return _session; }
        }
        
        public static void Configure(string connections, Level level = Level.Debug)
        {
            _si.Connections = connections;
            _si.Level = level;
        }
        
        public static void SetEnabled(bool enabled)
        {
            _si.Enabled = enabled;
        }
        
        public static void LogMethodEntry(string methodName)
        {
            _session.EnterMethod(methodName);
        }
        
        public static void LogMethodExit(string methodName)
        {
            _session.LeaveMethod(methodName);
        }
        
        public static void LogInfo(string message)
        {
            _session.LogMessage(message);
        }
        
        public static void LogWarning(string message)
        {
            _session.LogWarning(message);
        }
        
        public static void LogError(string message, Exception ex = null)
        {
            if (ex != null)
            {
                _session.LogException(message, ex);
            }
            else
            {
                _session.LogError(message);
            }
        }
        
        public static void LogDebug(string message)
        {
            _session.LogDebug(message);
        }
        
        public static void LogInteger(string title, int value)
        {
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogString(string title, string value)
        {
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogValue(string title, object value)
        {
            _session.LogMessage($"{title}: {value?.ToString() ?? "(null)"}");
        }
        
        public static void LogBoolean(string title, bool value)
        {
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogText(string title, string value)
        {
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogObject(string title, object value)
        {
            // چون در نسخه قدیمی LogObject به صورت مستقیم وجود ندارد، می‌توانیم خصوصیات را به صورت دستی لاگ کنیم
            _session.LogMessage($"--- {title} ---");
            
            if (value == null)
            {
                _session.LogMessage("(null)");
                return;
            }
            
            foreach (var prop in value.GetType().GetProperties())
            {
                try
                {
                    var propValue = prop.GetValue(value, null);
                    _session.LogMessage($"{prop.Name}: {propValue?.ToString() ?? "(null)"}");
                }
                catch
                {
                    _session.LogMessage($"{prop.Name}: (error getting value)");
                }
            }
        }
        
        public static void BeginTimedOperation(string operationName)
        {
            _session.EnterMethod(operationName);
            _session.LogText("Start Time", DateTime.Now.ToString());
        }
        
        public static void EndTimedOperation(string operationName, DateTime startTime)
        {
            TimeSpan elapsed = DateTime.Now - startTime;
            _session.LogText("Elapsed Time (ms)", elapsed.TotalMilliseconds.ToString());
            _session.LeaveMethod(operationName);
        }
    }
    
    // کلاس‌های نمونه برای استفاده در مثال‌ها
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
    }
    
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
    
    public class Order
    {
        public int Id { get; set; }
        public Customer Customer { get; set; }
        public List<Product> Products { get; set; }
        public DateTime OrderDate { get; set; }
        
        public Order()
        {
            Products = new List<Product>();
        }
    }
    
    // کلاس‌های سرویس دهنده برای مثال‌های کاربردی
    public class DataService
    {
        public Customer GetCustomer(int id)
        {
            SILogger.LogMethodEntry("GetCustomer");
            try 
            {
                SILogger.LogMessage($"Customer ID: {id}");
                
                // شبیه‌سازی دریافت مشتری از دیتابیس
                if (id <= 0)
                {
                    SILogger.LogWarning("Invalid customer ID provided");
                    return null;
                }
                
                Thread.Sleep(100); // شبیه‌سازی تأخیر دسترسی به دیتابیس
                
                var customer = new Customer
                {
                    Id = id,
                    Name = $"مشتری {id}",
                    Email = $"customer{id}@example.com",
                    Phone = $"09{id.ToString().PadLeft(9, '1')}"
                };
                
                SILogger.LogObject("Retrieved Customer", customer);
                return customer;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error retrieving customer", ex);
                throw;
            }
            finally
            {
                SILogger.LogMethodExit("GetCustomer");
            }
        }
        
        public List<Product> GetProducts(int count)
        {
            SILogger.LogMethodEntry("GetProducts");
            try
            {
                SILogger.LogMessage($"Requested Count: {count}");
                
                if (count <= 0)
                {
                    SILogger.LogWarning("Invalid product count requested");
                    return new List<Product>();
                }
                
                var products = new List<Product>();
                for (int i = 1; i <= count; i++)
                {
                    Thread.Sleep(50); // شبیه‌سازی تأخیر
                    
                    var product = new Product
                    {
                        Id = i,
                        Name = $"محصول {i}",
                        Price = i * 10000,
                        Quantity = 10
                    };
                    
                    products.Add(product);
                    SILogger.LogMessage($"Added Product: {product.Name}");
                }
                
                SILogger.LogMessage($"Products Retrieved: {products.Count}");
                return products;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error retrieving products", ex);
                throw;
            }
            finally
            {
                SILogger.LogMethodExit("GetProducts");
            }
        }
        
        public bool SaveOrder(Order order)
        {
            SILogger.LogMethodEntry("SaveOrder");
            DateTime startTime = DateTime.Now;
            
            try
            {
                if (order == null)
                {
                    SILogger.LogError("Null order provided");
                    return false;
                }
                
                SILogger.LogObject("Order Info", order);
                SILogger.LogObject("Customer Info", order.Customer);
                
                SILogger.LogInfo("Saving products:");
                foreach (var product in order.Products)
                {
                    SILogger.LogObject($"Product {product.Id}", product);
                    Thread.Sleep(20); // شبیه‌سازی ذخیره محصول
                }
                
                // شبیه‌سازی ذخیره سفارش
                Thread.Sleep(200);
                
                SILogger.LogInfo("Order saved successfully");
                return true;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error saving order", ex);
                return false;
            }
            finally
            {
                TimeSpan elapsed = DateTime.Now - startTime;
                SILogger.LogMessage($"Save Operation Duration (ms): {elapsed.TotalMilliseconds}");
                SILogger.LogMethodExit("SaveOrder");
            }
        }
    }
    
    public class FileProcessor
    {
        public void ProcessFile(string filePath)
        {
            SILogger.LogMethodEntry("ProcessFile");
            
            try
            {
                SILogger.LogMessage($"File Path: {filePath}");
                
                if (string.IsNullOrEmpty(filePath))
                {
                    SILogger.LogError("Empty file path provided");
                    return;
                }
                
                if (!File.Exists(filePath))
                {
                    SILogger.LogError($"File not found: {filePath}");
                    return;
                }
                
                // لاگ اطلاعات فایل
                var fileInfo = new FileInfo(filePath);
                SILogger.LogMessage($"File Size (bytes): {fileInfo.Length}");
                SILogger.LogMessage($"Creation Time: {fileInfo.CreationTime}");
                
                // لاگ محتوای فایل (برای فایل‌های متنی)
                if (fileInfo.Extension.ToLower() == ".txt" || fileInfo.Extension.ToLower() == ".log")
                {
                    SILogger.MainSession.LogFile("File Content", filePath);
                }
                
                // شبیه‌سازی پردازش فایل
                SILogger.LogInfo("Processing file contents...");
                Thread.Sleep(300);
                
                SILogger.LogInfo("File processing completed");
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error processing file", ex);
            }
            finally
            {
                SILogger.LogMethodExit("ProcessFile");
            }
        }
    }
    
    // کلاس اصلی برنامه که تمام مثال‌ها را دربرمی‌گیرد
    class Program
    {
        private static readonly SmartInspect _si = new SmartInspect("MainApplication");
        private static readonly Session _session;
        private static readonly DataService _dataService = new DataService();
        private static readonly FileProcessor _fileProcessor = new FileProcessor();
        
        static Program()
        {
            _session = _si.AddSession("Main");
        }
        
        static void Main(string[] args)
        {
            try
            {
                // پیکربندی اولیه SmartInspect
                InitializeSmartInspect();
                
                // نمونه‌های مختلف استفاده از SmartInspect
                BasicLoggingExample();
                ExceptionHandlingExample();
                PerformanceMeasurementExample();
                DataStructuresExample();
                FileOperationsExample();
                DatabaseOperationSimulationExample();
                
                Console.WriteLine("همه عملیات‌های لاگ‌گیری با موفقیت انجام شد.");
                Console.WriteLine("لاگ‌ها در مسیر C:\\Logs\\AppLog.sil ذخیره شده‌اند.");
                Console.WriteLine("برای مشاهده جزئیات، برنامه SmartInspect Console را باز کنید.");
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                _session.LogException("خطای کلی در برنامه", ex);
                Console.WriteLine($"خطا: {ex.Message}");
            }
            finally
            {
                // بستن SmartInspect
                _si.Enabled = false;
            }
        }
        
        private static void InitializeSmartInspect()
        {
            // تنظیم اولیه SmartInspect
            _si.Enabled = true;
            
            // تنظیم مسیر فایل لاگ
            _si.Connections = "file(filename=\"C:\\Logs\\AppLog.sil\", " +
                               "rotate=daily, maxsize=10mb, maxparts=5)";
            
            // تنظیم سطح لاگ‌گیری
            _si.Level = Level.Debug;
            
            // ثبت شروع برنامه
            _session.LogMessage("===== برنامه شروع شد =====");
            _session.LogSystem("اطلاعات سیستم");
        }
        
        private static void BasicLoggingExample()
        {
            _session.EnterMethod("BasicLoggingExample");
            
            try
            {
                _session.LogMessage("مثال ۱: نمونه‌های اولیه لاگ‌گیری");
                
                // لاگ‌های با سطوح مختلف
                _session.LogVerbose("این یک پیام با جزئیات است");
                _session.LogDebug("این یک پیام دیباگ است");
                _session.LogMessage("این یک پیام معمولی است");
                _session.LogWarning("این یک هشدار است");
                _session.LogError("این یک خطا است (به عنوان مثال)");
                
                // ثبت انواع داده
                _session.LogMessage($"عدد صحیح: {42}");
                _session.LogMessage($"رشته متنی: {"متن نمونه"}");
                _session.LogMessage($"مقدار منطقی: {true}");
                _session.LogMessage($"تاریخ و زمان: {DateTime.Now}");
                
                // تنظیم رنگ موقت
                _session.Color = Color.Blue;
                _session.LogMessage("این پیام آبی رنگ است");
                _session.Color = Color.Black; // بازگشت به رنگ پیش‌فرض
            }
            finally
            {
                _session.LeaveMethod("BasicLoggingExample");
            }
        }
        
        private static void ExceptionHandlingExample()
        {
            _session.EnterMethod("ExceptionHandlingExample");
            
            try
            {
                _session.LogMessage("مثال ۲: مدیریت استثناها");
                
                try
                {
                    // ایجاد یک استثنا عمدی
                    _session.LogMessage("تلاش برای تقسیم بر صفر...");
                    int result = 10 / 0; // ایجاد استثنا
                }
                catch (DivideByZeroException ex)
                {
                    // ثبت استثنا
                    _session.LogException("خطای تقسیم بر صفر", ex);
                }
                
                try
                {
                    // استثنای دیگر
                    _session.LogMessage("تلاش برای دسترسی به یک آرایه خارج از محدوده...");
                    int[] numbers = new int[3];
                    int value = numbers[10]; // ایجاد استثنا
                }
                catch (IndexOutOfRangeException ex)
                {
                    // ثبت استثنا
                    _session.LogException("خطای دسترسی به آرایه", ex);
                }
            }
            finally
            {
                _session.LeaveMethod("ExceptionHandlingExample");
            }
        }
        
        private static void PerformanceMeasurementExample()
        {
            _session.EnterMethod("PerformanceMeasurementExample");
            DateTime startTime = DateTime.Now;
            
            try
            {
                _session.LogMessage("مثال ۳: اندازه‌گیری زمان اجرا");
                
                // اندازه‌گیری زمان یک عملیات ساده
                DateTime operationStart = DateTime.Now;
                
                _session.LogMessage("شروع عملیات زمان‌بر...");
                Thread.Sleep(1500); // شبیه‌سازی یک عملیات زمان‌بر 
                _session.LogMessage("پایان عملیات زمان‌بر");
                
                TimeSpan operationTime = DateTime.Now - operationStart;
                _session.LogMessage($"زمان اجرای عملیات (میلی‌ثانیه): {operationTime.TotalMilliseconds}");
                
                // اندازه‌گیری زمان یک حلقه
                operationStart = DateTime.Now;
                
                int sum = 0;
                for (int i = 0; i < 1000000; i++)
                {
                    sum += i;
                }
                
                operationTime = DateTime.Now - operationStart;
                _session.LogMessage($"مجموع محاسبه شده: {sum}");
                _session.LogMessage($"زمان محاسبه (میلی‌ثانیه): {operationTime.TotalMilliseconds}");
            }
            finally
            {
                TimeSpan totalTime = DateTime.Now - startTime;
                _session.LogMessage($"زمان کل (میلی‌ثانیه): {totalTime.TotalMilliseconds}");
                _session.LeaveMethod("PerformanceMeasurementExample");
            }
        }
        
        private static void DataStructuresExample()
        {
            _session.EnterMethod("DataStructuresExample");
            
            try
            {
                _session.LogMessage("مثال ۴: ثبت ساختارهای داده");
                
                // ثبت آرایه
                int[] numbers = { 1, 2, 3, 4, 5 };
                _session.LogMessage("آرایه اعداد:");
                for (int i = 0; i < numbers.Length; i++)
                {
                    _session.LogMessage($"numbers[{i}]: {numbers[i]}");
                }
                
                // ثبت لیست
                List<string> names = new List<string> { "علی", "محمد", "رضا", "حسین" };
                _session.LogMessage("لیست نام‌ها:");
                for (int i = 0; i < names.Count; i++)
                {
                    _session.LogMessage($"names[{i}]: {names[i]}");
                }
                
                // ثبت دیکشنری
                Dictionary<string, int> scores = new Dictionary<string, int>
                {
                    { "علی", 85 },
                    { "محمد", 92 },
                    { "رضا", 78 },
                    { "حسین", 90 }
                };
                
                _session.LogMessage("امتیازات:");
                foreach (var entry in scores)
                {
                    _session.LogMessage($"امتیاز {entry.Key}: {entry.Value}");
                }
                
                // ثبت کلاس
                var customer = new Customer
                {
                    Id = 1,
                    Name = "محمد احمدی",
                    Email = "mohammad@example.com",
                    Phone = "09123456789"
                };
                
                _session.LogMessage("اطلاعات مشتری:");
                _session.LogMessage($"شناسه: {customer.Id}");
                _session.LogMessage($"نام: {customer.Name}");
                _session.LogMessage($"ایمیل: {customer.Email}");
                _session.LogMessage($"تلفن: {customer.Phone}");
            }
            finally
            {
                _session.LeaveMethod("DataStructuresExample");
            }
        }
        
        private static void FileOperationsExample()
        {
            _session.EnterMethod("FileOperationsExample");
            
            try
            {
                _session.LogMessage("مثال ۵: عملیات فایل");
                
                // ایجاد یک فایل متنی موقت برای تست
                string tempFilePath = Path.Combine(Path.GetTempPath(), "smartinspect_test.txt");
                
                try
                {
                    // نوشتن در فایل
                    _session.LogMessage($"مسیر فایل: {tempFilePath}");
                    _session.LogMessage("در حال ایجاد فایل...");
                    
                    File.WriteAllText(tempFilePath, "این یک فایل تست برای SmartInspect است.\r\n" +
                                                  "خط دوم فایل تست.\r\n" +
                                                  "خط سوم فایل تست.");
                    
                    _session.LogMessage("فایل با موفقیت ایجاد شد");
                    
                    // نمایش اطلاعات فایل
                    FileInfo fileInfo = new FileInfo(tempFilePath);
                    _session.LogMessage($"اندازه فایل (بایت): {fileInfo.Length}");
                    _session.LogMessage($"زمان ایجاد: {fileInfo.CreationTime}");
                    
                    // لاگ کردن محتوای فایل
                    _session.LogFile("محتوای فایل", tempFilePath);
                    
                    // خواندن و ثبت محتوای فایل به صورت دستی
                    string[] lines = File.ReadAllLines(tempFilePath);
                    _session.LogMessage($"تعداد خطوط: {lines.Length}");
                    
                    for (int i = 0; i < lines.Length; i++)
                    {
                        _session.LogMessage($"خط {i+1}: {lines[i]}");
                    }
                    
                    // پردازش فایل با استفاده از کلاس FileProcessor
                    _fileProcessor.ProcessFile(tempFilePath);
                }
                finally
                {
                    // پاک کردن فایل موقت
                    if (File.Exists(tempFilePath))
                    {
                        File.Delete(tempFilePath);
                        _session.LogMessage("فایل موقت حذف شد");
                    }
                }
            }
            catch (Exception ex)
            {
                _session.LogException("خطا در عملیات فایل", ex);
            }
            finally
            {
                _session.LeaveMethod("FileOperationsExample");
            }
        }
        
        private static void DatabaseOperationSimulationExample()
        {
            _session.EnterMethod("DatabaseOperationSimulationExample");
            
            try
            {
                _session.LogMessage("مثال ۶: شبیه‌سازی عملیات دیتابیس");
                
                // شبیه‌سازی یک عملیات دیتابیس کامل
                
                // 1. دریافت مشتری
                Customer customer = _dataService.GetCustomer(123);
                
                if (customer == null)
                {
                    _session.LogError("مشتری یافت نشد");
                    return;
                }
                
                // 2. دریافت محصولات
                List<Product> products = _dataService.GetProducts(3);
                
                if (products.Count == 0)
                {
                    _session.LogError("محصولی یافت نشد");
                    return;
                }
                
                // 3. ایجاد سفارش
                var order = new Order
                {
                    Id = 1001,
                    Customer = customer,
                    Products = products,
                    OrderDate = DateTime.Now
                };
                
                // 4. محاسبه و لاگ کردن مجموع سفارش
                decimal total = 0;
                _session.LogMessage("محاسبه مجموع سفارش:");
                
                foreach (var product in order.Products)
                {
                    decimal itemTotal = product.Price * product.Quantity;
                    _session.LogMessage($"محصول {product.Id}: {product.Name} - {itemTotal}");
                    total += itemTotal;
                }
                
                _session.LogMessage($"مجموع نهایی: {total}");
                
                // 5. ذخیره سفارش
                bool saveResult = _dataService.SaveOrder(order);
                
                _session.LogMessage($"نتیجه ذخیره سفارش: {saveResult}");
                
                if (saveResult)
                {
                    _session.LogMessage("سفارش با موفقیت ثبت شد");
                }
                else
                {
                    _session.LogError("خطا در ثبت سفارش");
                }
            }
            catch (Exception ex)
            {
                _session.LogException("خطا در شبیه‌سازی عملیات دیتابیس", ex);
            }
            finally
            {
                _session.LeaveMethod("DatabaseOperationSimulationExample");
            }
        }
    }
}
