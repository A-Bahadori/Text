using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using Gurock.SmartInspect;

namespace SmartInspectSample
{
    // Logger management class using Singleton pattern
    public static class SILogger
    {
        private static readonly SmartInspect _si;
        private static readonly Session _session;
        
        static SILogger()
        {
            _si = new SmartInspect("SILogger");
            
            // Default settings
            _si.Connections = "file(filename=\"D:\\SmartInspectTest\\AppLog.sil\", rotate=daily)";
            _si.Level = Level.Debug;
            _si.Enabled = true;
            
            _session = _si.AddSession("Main");
        }
        
        public static Session MainSession
        {
            get { return _session; }
        }
        
        public static void Configure(string connections, Level level = Level.Debug)
        {
            _si.Connections = connections;
            _si.Level = level;
        }
        
        public static void SetEnabled(bool enabled)
        {
            _si.Enabled = enabled;
        }
        
        public static void LogMethodEntry(string methodName)
        {
            _session.EnterMethod(methodName);
        }
        
        public static void LogMethodExit(string methodName)
        {
            _session.LeaveMethod(methodName);
        }
        
        public static void LogInfo(string message)
        {
            _session.LogMessage(message);
        }
        
        public static void LogMessage(string message)
        {
            _session.LogMessage(message);
        }
        
        public static void LogWarning(string message)
        {
            _session.LogWarning(message);
        }
        
        public static void LogError(string message, Exception ex = null)
        {
            if (ex != null)
            {
                _session.LogException(message, ex);
            }
            else
            {
                _session.LogError(message);
            }
        }
        
        public static void LogDebug(string message)
        {
            _session.LogDebug(message);
        }
        
        public static void LogInteger(string title, int value)
        {
            // Using LogMessage instead of LogInteger which might not be available
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogString(string title, string value)
        {
            // Using LogMessage instead of LogString which might not be available
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogValue(string title, object value)
        {
            // Using LogMessage for values as LogValue might not be available
            _session.LogMessage($"{title}: {value?.ToString() ?? "(null)"}");
        }
        
        public static void LogBoolean(string title, bool value)
        {
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogText(string title, string value)
        {
            // Use LogMessage instead of LogText which might not be available
            _session.LogMessage($"{title}: {value}");
        }
        
        public static void LogObject(string title, object value)
        {
            // Since LogObject is not directly available in older versions, we can log properties manually
            _session.LogMessage($"--- {title} ---");
            
            if (value == null)
            {
                _session.LogMessage("(null)");
                return;
            }
            
            foreach (var prop in value.GetType().GetProperties())
            {
                try
                {
                    var propValue = prop.GetValue(value, null);
                    _session.LogMessage($"{prop.Name}: {propValue?.ToString() ?? "(null)"}");
                }
                catch
                {
                    _session.LogMessage($"{prop.Name}: (error getting value)");
                }
            }
        }
        
        public static void BeginTimedOperation(string operationName)
        {
            _session.EnterMethod(operationName);
            _session.LogMessage($"Start Time: {DateTime.Now}");
        }
        
        public static void EndTimedOperation(string operationName, DateTime startTime)
        {
            TimeSpan elapsed = DateTime.Now - startTime;
            _session.LogMessage($"Elapsed Time (ms): {elapsed.TotalMilliseconds}");
            _session.LeaveMethod(operationName);
        }
    }
    
    // Example classes for use in samples
    public class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
    }
    
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Quantity { get; set; }
    }
    
    public class Order
    {
        public int Id { get; set; }
        public Customer Customer { get; set; }
        public List<Product> Products { get; set; }
        public DateTime OrderDate { get; set; }
        
        public Order()
        {
            Products = new List<Product>();
        }
    }
    
    // Service classes for practical examples
    public class DataService
    {
        public Customer GetCustomer(int id)
        {
            SILogger.LogMethodEntry("GetCustomer");
            try 
            {
                SILogger.LogInfo($"Customer ID: {id}");
                
                // Simulate retrieving customer from database
                if (id <= 0)
                {
                    SILogger.LogWarning("Invalid customer ID provided");
                    return null;
                }
                
                Thread.Sleep(100); // Simulate database access delay
                
                var customer = new Customer
                {
                    Id = id,
                    Name = $"Customer {id}",
                    Email = $"customer{id}@example.com",
                    Phone = $"09{id.ToString().PadLeft(9, '1')}"
                };
                
                SILogger.LogObject("Retrieved Customer", customer);
                return customer;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error retrieving customer", ex);
                throw;
            }
            finally
            {
                SILogger.LogMethodExit("GetCustomer");
            }
        }
        
        public List<Product> GetProducts(int count)
        {
            SILogger.LogMethodEntry("GetProducts");
            try
            {
                SILogger.LogInfo($"Requested Count: {count}");
                
                if (count <= 0)
                {
                    SILogger.LogWarning("Invalid product count requested");
                    return new List<Product>();
                }
                
                var products = new List<Product>();
                for (int i = 1; i <= count; i++)
                {
                    Thread.Sleep(50); // Simulate delay
                    
                    var product = new Product
                    {
                        Id = i,
                        Name = $"Product {i}",
                        Price = i * 10000,
                        Quantity = 10
                    };
                    
                    products.Add(product);
                    SILogger.LogInfo($"Added Product: {product.Name}");
                }
                
                SILogger.LogInfo($"Products Retrieved: {products.Count}");
                return products;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error retrieving products", ex);
                throw;
            }
            finally
            {
                SILogger.LogMethodExit("GetProducts");
            }
        }
        
        public bool SaveOrder(Order order)
        {
            SILogger.LogMethodEntry("SaveOrder");
            DateTime startTime = DateTime.Now;
            
            try
            {
                if (order == null)
                {
                    SILogger.LogError("Null order provided");
                    return false;
                }
                
                SILogger.LogObject("Order Info", order);
                SILogger.LogObject("Customer Info", order.Customer);
                
                SILogger.LogInfo("Saving products:");
                foreach (var product in order.Products)
                {
                    SILogger.LogObject($"Product {product.Id}", product);
                    Thread.Sleep(20); // Simulate product saving
                }
                
                // Simulate order saving
                Thread.Sleep(200);
                
                SILogger.LogInfo("Order saved successfully");
                return true;
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error saving order", ex);
                return false;
            }
            finally
            {
                TimeSpan elapsed = DateTime.Now - startTime;
                SILogger.LogInfo($"Save Operation Duration (ms): {elapsed.TotalMilliseconds}");
                SILogger.LogMethodExit("SaveOrder");
            }
        }
    }
    
    public class FileProcessor
    {
        public void ProcessFile(string filePath)
        {
            SILogger.LogMethodEntry("ProcessFile");
            
            try
            {
                SILogger.LogInfo($"File Path: {filePath}");
                
                if (string.IsNullOrEmpty(filePath))
                {
                    SILogger.LogError("Empty file path provided");
                    return;
                }
                
                if (!File.Exists(filePath))
                {
                    SILogger.LogError($"File not found: {filePath}");
                    return;
                }
                
                // Log file information
                var fileInfo = new FileInfo(filePath);
                SILogger.LogInfo($"File Size (bytes): {fileInfo.Length}");
                SILogger.LogInfo($"Creation Time: {fileInfo.CreationTime}");
                
                // Log file content (for text files)
                if (fileInfo.Extension.ToLower() == ".txt" || fileInfo.Extension.ToLower() == ".log")
                {
                    // Using file reading approach instead of LogFile
                    SILogger.LogInfo($"File Content: {filePath}");
                    try {
                        string content = File.ReadAllText(filePath);
                        SILogger.LogInfo(content);
                    }
                    catch (Exception ex) {
                        SILogger.LogError($"Error reading file: {ex.Message}");
                    }
                }
                
                // Simulate file processing
                SILogger.LogInfo("Processing file contents...");
                Thread.Sleep(300);
                
                SILogger.LogInfo("File processing completed");
            }
            catch (Exception ex)
            {
                SILogger.LogError("Error processing file", ex);
            }
            finally
            {
                SILogger.LogMethodExit("ProcessFile");
            }
        }
    }
    
    // Main program class containing all examples
    class Program
    {
        private static readonly SmartInspect _si = new SmartInspect("MainApplication");
        private static readonly Session _session;
        private static readonly DataService _dataService = new DataService();
        private static readonly FileProcessor _fileProcessor = new FileProcessor();
        
        static Program()
        {
            _session = _si.AddSession("Main");
        }
        
        static void Main(string[] args)
        {
            try
            {
                // Initial SmartInspect configuration
                InitializeSmartInspect();
                
                // Various examples of using SmartInspect
                BasicLoggingExample();
                ExceptionHandlingExample();
                PerformanceMeasurementExample();
                DataStructuresExample();
                FileOperationsExample();
                DatabaseOperationSimulationExample();
                
                Console.WriteLine("All logging operations completed successfully.");
                Console.WriteLine("Logs are saved in D:\\SmartInspectTest\\AppLog.sil.");
                Console.WriteLine("To view details, open the SmartInspect Console application.");
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                _session.LogException("General application error", ex);
                Console.WriteLine($"Error: {ex.Message}");
            }
            finally
            {
                // Close SmartInspect
                _si.Enabled = false;
            }
        }
        
        private static void InitializeSmartInspect()
        {
            // Initial SmartInspect setup
            _si.Enabled = true;
            
            // Set log file path
            _si.Connections = "file(filename=\"D:\\SmartInspectTest\\AppLog.sil\", " +
                               "rotate=daily, maxsize=10mb, maxparts=5)";
            
            // Set logging level
            _si.Level = Level.Debug;
            
            // Record program start
            _session.LogMessage("===== Program Started =====");
            _session.LogMessage("System Information: " + Environment.OSVersion.ToString());
        }
        
        private static void BasicLoggingExample()
        {
            _session.EnterMethod("BasicLoggingExample");
            
            try
            {
                _session.LogMessage("Example 1: Basic Logging Examples");
                
                // Logs with different levels
                _session.LogVerbose("This is a verbose message");
                _session.LogDebug("This is a debug message");
                _session.LogMessage("This is a normal message");
                _session.LogWarning("This is a warning");
                _session.LogError("This is an error (example)");
                
                // Log different data types
                _session.LogMessage($"Integer: {42}");
                _session.LogMessage($"String: {"Sample text"}");
                _session.LogMessage($"Boolean: {true}");
                _session.LogMessage($"Date and Time: {DateTime.Now}");
                
                // Color settings removed
                _session.LogMessage("This would be a blue message");
            }
            finally
            {
                _session.LeaveMethod("BasicLoggingExample");
            }
        }
        
        private static void ExceptionHandlingExample()
        {
            _session.EnterMethod("ExceptionHandlingExample");
            
            try
            {
                _session.LogMessage("Example 2: Exception Handling");
                
                try
                {
                    // Create an intentional exception
                    _session.LogMessage("Attempting to divide by zero...");
                    int divisor = 0; // Set to zero at runtime to force exception
                    int result = 10 / divisor; // Create exception
                }
                catch (DivideByZeroException ex)
                {
                    // Log exception
                    _session.LogException("Division by zero error", ex);
                }
                
                try
                {
                    // Another exception
                    _session.LogMessage("Attempting to access array out of bounds...");
                    int[] numbers = new int[3];
                    int value = numbers[10]; // Create exception
                }
                catch (IndexOutOfRangeException ex)
                {
                    // Log exception
                    _session.LogException("Array access error", ex);
                }
            }
            finally
            {
                _session.LeaveMethod("ExceptionHandlingExample");
            }
        }
        
        private static void PerformanceMeasurementExample()
        {
            _session.EnterMethod("PerformanceMeasurementExample");
            DateTime startTime = DateTime.Now;
            
            try
            {
                _session.LogMessage("Example 3: Runtime Measurement");
                
                // Measure time of a simple operation
                DateTime operationStart = DateTime.Now;
                
                _session.LogMessage("Starting time-consuming operation...");
                Thread.Sleep(1500); // Simulate a time-consuming operation
                _session.LogMessage("Time-consuming operation complete");
                
                TimeSpan operationTime = DateTime.Now - operationStart;
                _session.LogMessage($"Operation execution time (milliseconds): {operationTime.TotalMilliseconds}");
                
                // Measure loop time
                operationStart = DateTime.Now;
                
                int sum = 0;
                for (int i = 0; i < 1000000; i++)
                {
                    sum += i;
                }
                
                operationTime = DateTime.Now - operationStart;
                _session.LogMessage($"Calculated sum: {sum}");
                _session.LogMessage($"Calculation time (milliseconds): {operationTime.TotalMilliseconds}");
            }
            finally
            {
                TimeSpan totalTime = DateTime.Now - startTime;
                _session.LogMessage($"Total time (milliseconds): {totalTime.TotalMilliseconds}");
                _session.LeaveMethod("PerformanceMeasurementExample");
            }
        }
        
        private static void DataStructuresExample()
        {
            _session.EnterMethod("DataStructuresExample");
            
            try
            {
                _session.LogMessage("Example 4: Logging Data Structures");
                
                // Log array
                int[] numbers = { 1, 2, 3, 4, 5 };
                _session.LogMessage("Numbers array:");
                for (int i = 0; i < numbers.Length; i++)
                {
                    _session.LogMessage($"numbers[{i}]: {numbers[i]}");
                }
                
                // Log list
                List<string> names = new List<string> { "Alex", "Michael", "Robert", "John" };
                _session.LogMessage("Names list:");
                for (int i = 0; i < names.Count; i++)
                {
                    _session.LogMessage($"names[{i}]: {names[i]}");
                }
                
                // Log dictionary
                Dictionary<string, int> scores = new Dictionary<string, int>
                {
                    { "Alex", 85 },
                    { "Michael", 92 },
                    { "Robert", 78 },
                    { "John", 90 }
                };
                
                _session.LogMessage("Scores:");
                foreach (var entry in scores)
                {
                    _session.LogMessage($"Score {entry.Key}: {entry.Value}");
                }
                
                // Log class
                var customer = new Customer
                {
                    Id = 1,
                    Name = "Michael Smith",
                    Email = "michael@example.com",
                    Phone = "09123456789"
                };
                
                _session.LogMessage("Customer Information:");
                _session.LogMessage($"ID: {customer.Id}");
                _session.LogMessage($"Name: {customer.Name}");
                _session.LogMessage($"Email: {customer.Email}");
                _session.LogMessage($"Phone: {customer.Phone}");
            }
            finally
            {
                _session.LeaveMethod("DataStructuresExample");
            }
        }
        
        private static void FileOperationsExample()
        {
            _session.EnterMethod("FileOperationsExample");
            
            try
            {
                _session.LogMessage("Example 5: File Operations");
                
                // Create a temporary text file for testing
                string tempFilePath = Path.Combine(Path.GetTempPath(), "smartinspect_test.txt");
                
                try
                {
                    // Write to file
                    _session.LogMessage($"File path: {tempFilePath}");
                    _session.LogMessage("Creating file...");
                    
                    File.WriteAllText(tempFilePath, "This is a test file for SmartInspect.\r\n" +
                                                  "Second line of the test file.\r\n" +
                                                  "Third line of the test file.");
                    
                    _session.LogMessage("File created successfully");
                    
                    // Display file information
                    FileInfo fileInfo = new FileInfo(tempFilePath);
                    _session.LogMessage($"File size (bytes): {fileInfo.Length}");
                    _session.LogMessage($"Creation time: {fileInfo.CreationTime}");
                    
                    // Log file content
                    _session.LogMessage($"File content: {tempFilePath}");
                    try {
                        string content = File.ReadAllText(tempFilePath);
                        _session.LogMessage(content);
                    }
                    catch (Exception ex) {
                        _session.LogMessage($"Error reading file: {ex.Message}");
                    }
                    
                    // Read and log file content manually
                    string[] lines = File.ReadAllLines(tempFilePath);
                    _session.LogMessage($"Number of lines: {lines.Length}");
                    
                    for (int i = 0; i < lines.Length; i++)
                    {
                        _session.LogMessage($"Line {i+1}: {lines[i]}");
                    }
                    
                    // Process file using FileProcessor class
                    _fileProcessor.ProcessFile(tempFilePath);
                }
                finally
                {
                    // Delete temporary file
                    if (File.Exists(tempFilePath))
                    {
                        File.Delete(tempFilePath);
                        _session.LogMessage("Temporary file deleted");
                    }
                }
            }
            catch (Exception ex)
            {
                _session.LogException("Error in file operations", ex);
            }
            finally
            {
                _session.LeaveMethod("FileOperationsExample");
            }
        }
        
        private static void DatabaseOperationSimulationExample()
        {
            _session.EnterMethod("DatabaseOperationSimulationExample");
            
            try
            {
                _session.LogMessage("Example 6: Database Operation Simulation");
                
                // Simulate a complete database operation
                
                // 1. Get customer
                Customer customer = _dataService.GetCustomer(123);
                
                if (customer == null)
                {
                    _session.LogError("Customer not found");
                    return;
                }
                
                // 2. Get products
                List<Product> products = _dataService.GetProducts(3);
                
                if (products.Count == 0)
                {
                    _session.LogError("No products found");
                    return;
                }
                
                // 3. Create order
                var order = new Order
                {
                    Id = 1001,
                    Customer = customer,
                    Products = products,
                    OrderDate = DateTime.Now
                };
                
                // 4. Calculate and log order total
                decimal total = 0;
                _session.LogMessage("Calculating order total:");
                
                foreach (var product in order.Products)
                {
                    decimal itemTotal = product.Price * product.Quantity;
                    _session.LogMessage($"Product {product.Id}: {product.Name} - {itemTotal}");
                    total += itemTotal;
                }
                
                _session.LogMessage($"Final total: {total}");
                
                // 5. Save order
                bool saveResult = _dataService.SaveOrder(order);
                
                _session.LogMessage($"Order save result: {saveResult}");
                
                if (saveResult)
                {
                    _session.LogMessage("Order saved successfully");
                }
                else
                {
                    _session.LogError("Error saving order");
                }
            }
            catch (Exception ex)
            {
                _session.LogException("Error in database operation simulation", ex);
            }
            finally
            {
                _session.LeaveMethod("DatabaseOperationSimulationExample");
            }
        }
    }
}
