// ... (کد قبلی بدون تغییر تا ReferenceWriter)

public sealed class ReferenceWriter : IReferenceWriter
{
    private const string BaseOutputFolderName = "Project Reference Mapper";
    private readonly string _currentRunPath;
    private readonly ILogger<ReferenceWriter> _logger;

    public ReferenceWriter(ILogger<ReferenceWriter> logger)
    {
        _logger = logger;
        var timestamp = DateTime.Now.ToString("yyyy-MM-dd HH-mm-ss");
        var baseOutputPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, BaseOutputFolderName);
        _currentRunPath = Path.Combine(baseOutputPath, $"Run_{timestamp}");
        EnsureOutputDirectoryExists();
    }

    private void EnsureOutputDirectoryExists()
    {
        if (!Directory.Exists(_currentRunPath))
        {
            Directory.CreateDirectory(_currentRunPath);
            _logger.LogInformation("پوشه خروجی برای این اجرا ایجاد شد: {Path}", _currentRunPath);
        }
    }

    public async Task WriteReferencesAsync(ProjectInfo projectInfo)
    {
        var sanitizedProjectName = SanitizeFileName(projectInfo.ProjectName);
        var outputFileName = $"{sanitizedProjectName}_References.txt";
        var outputPath = Path.Combine(_currentRunPath, outputFileName);

        var content = new List<string>
        {
            "ProjectReferenceMapper - گزارش رفرنس‌ها",
            $"تاریخ ایجاد: {DateTime.Now}",
            $"نام پروژه: {projectInfo.ProjectName}",
            $"نوع پروژه: {(projectInfo.IsSdkStyle ? "SDK-Style" : "Legacy")}",
            $"مسیر پروژه: {projectInfo.ProjectPath}",
            "----------------------------------------",
            string.Empty,
            "لیست رفرنس‌ها:",
            string.Empty
        };

        content.AddRange(projectInfo.References.Select(FormatReference));

        // اضافه کردن خلاصه آماری
        content.AddRange(new[]
        {
            string.Empty,
            "----------------------------------------",
            "خلاصه آماری:",
            $"تعداد کل رفرنس‌ها: {projectInfo.References.Count()}",
            $"تعداد Package References: {projectInfo.References.Count(r => r.Type == ReferenceType.Package)}",
            $"تعداد Project References: {projectInfo.References.Count(r => r.Type == ReferenceType.Project)}",
            $"تعداد Assembly References: {projectInfo.References.Count(r => r.Type == ReferenceType.Assembly)}"
        });

        await File.WriteAllLinesAsync(outputPath, content);
        _logger.LogInformation("فایل خروجی ایجاد شد: {Path}", outputPath);
    }

    private static string FormatReference(ReferenceInfo reference) => reference.Type switch
    {
        ReferenceType.Package => $"Package: {reference.Name} - Version: {reference.Version}",
        ReferenceType.Project => $"Project: {reference.Path}",
        ReferenceType.Assembly => $"Assembly: {reference.Name}",
        _ => throw new ArgumentException($"نوع رفرنس نامعتبر: {reference.Type}")
    };

    private static string SanitizeFileName(string fileName)
    {
        var invalidChars = Path.GetInvalidFileNameChars();
        return new string(fileName.Select(ch => invalidChars.Contains(ch) ? '_' : ch).ToArray());
    }
}

// تغییر در کلاس ProjectAnalyzer برای نمایش اطلاعات کلی
public sealed class ProjectAnalyzer : IProjectAnalyzer
{
    // ... (فیلدها و constructor بدون تغییر)

    public async Task AnalyzeProjectsAsync(string rootPath)
    {
        ArgumentException.ThrowIfNullOrEmpty(rootPath);

        if (!Directory.Exists(rootPath))
        {
            throw new DirectoryNotFoundException("مسیر مورد نظر یافت نشد.");
        }

        _logger.LogInformation("شروع تحلیل پروژه‌ها در مسیر: {Path}", rootPath);

        var projectFiles = _projectFinder.FindProjects(rootPath).ToList();
        _logger.LogInformation("تعداد پروژه‌های یافت شده: {Count}", projectFiles.Count);

        var tasks = projectFiles.Select(ProcessProjectAsync);
        await Task.WhenAll(tasks);

        _logger.LogInformation("تحلیل پروژه‌ها با موفقیت به پایان رسید.");
    }

    // ... (بقیه متدها بدون تغییر)
}

// اضافه کردن کد نمایش مسیر در انتهای برنامه اصلی
try
{
    Console.WriteLine("ProjectReferenceMapper v1.0");
    Console.WriteLine("یک ابزار برای نگاشت رفرنس‌های پروژه‌های سی‌شارپ");
    Console.WriteLine("----------------------------------------");

    Console.WriteLine("لطفاً مسیر پروژه را وارد کنید:");
    var projectPath = Console.ReadLine();

    await analyzer.AnalyzeProjectsAsync(projectPath);

    var baseOutputPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Project Reference Mapper");
    Console.WriteLine($"\nفایل‌های خروجی در مسیر زیر ایجاد شدند:");
    Console.WriteLine(baseOutputPath);
    
    Console.WriteLine("\nPress any key to exit...");
    Console.ReadKey();
}
catch (Exception ex)
{
    Console.WriteLine($"خطای غیرمنتظره: {ex.Message}");
    Console.WriteLine("\nPress any key to exit...");
    Console.ReadKey();
}
