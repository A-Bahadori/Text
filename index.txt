using System;
using System.Collections.Generic;
using System.IO;
using Gurock.SmartInspect;

namespace SmartInspectSample.UserLogging
{
    /// <summary>
    /// Logger for handling user-specific logging sessions.
    /// Each user gets their own logging session with custom properties.
    /// </summary>
    public class UserSessionLogger
    {
        // Singleton instance
        private static readonly UserSessionLogger _instance = new UserSessionLogger();
        
        // Main SmartInspect instance
        private readonly SmartInspect _si;
        
        // Dictionary to store user-specific sessions
        private readonly Dictionary<string, UserSession> _userSessions;
        
        // Log file path template (will include username)
        private const string LogFilePathTemplate = "D:\\SmartInspectTest\\Users\\{0}\\user_log.sil";
        
        /// <summary>
        /// Gets the singleton instance of the UserSessionLogger
        /// </summary>
        public static UserSessionLogger Instance { get { return _instance; } }
        
        /// <summary>
        /// Private constructor for singleton pattern
        /// </summary>
        private UserSessionLogger()
        {
            _si = new SmartInspect("UserSessionLog");
            _si.Enabled = true;
            _si.Level = Level.Debug;
            
            _userSessions = new Dictionary<string, UserSession>();
            
            // Create base directory
            Directory.CreateDirectory("D:\\SmartInspectTest\\Users");
        }
        
        /// <summary>
        /// Gets or creates a user-specific logging session
        /// </summary>
        /// <param name="username">The username to create a session for</param>
        /// <param name="role">The user's role (optional)</param>
        /// <param name="additionalInfo">Any additional user info to include (optional)</param>
        /// <returns>A UserSession object for logging</returns>
        public UserSession GetUserSession(string username, string role = null, Dictionary<string, string> additionalInfo = null)
        {
            if (string.IsNullOrEmpty(username))
                throw new ArgumentException("Username cannot be empty", nameof(username));
            
            // Return existing session if already created
            if (_userSessions.TryGetValue(username, out UserSession session))
                return session;
            
            // Create user-specific log directory
            string userLogDir = Path.GetDirectoryName(string.Format(LogFilePathTemplate, username));
            Directory.CreateDirectory(userLogDir);
            
            // Create new session
            session = new UserSession(username, _si, role, additionalInfo);
            
            // Store in dictionary
            _userSessions[username] = session;
            
            // Log user session creation
            session.LogInfo($"User session initialized for {username}" + (role != null ? $" with role {role}" : ""));
            return session;
        }
        
        /// <summary>
        /// Closes all user sessions and disables logging
        /// </summary>
        public void ShutDown()
        {
            foreach (var session in _userSessions.Values)
            {
                session.LogInfo("Session terminated");
            }
            
            _userSessions.Clear();
            _si.Enabled = false;
        }
    }
    
    /// <summary>
    /// Represents a single user's logging session with user-specific properties
    /// </summary>
    public class UserSession
    {
        private readonly Session _session;
        private readonly string _username;
        private readonly string _role;
        private readonly Dictionary<string, string> _userInfo;
        
        /// <summary>
        /// Creates a new user session
        /// </summary>
        public UserSession(string username, SmartInspect si, string role = null, Dictionary<string, string> additionalInfo = null)
        {
            _username = username;
            _role = role;
            _userInfo = additionalInfo ?? new Dictionary<string, string>();
            
            // Configure session for this user
            string logFilePath = string.Format("D:\\SmartInspectTest\\Users\\{0}\\user_log.sil", username);
            string connections = $"file(filename=\"{logFilePath}\", rotate=daily, maxsize=10mb, maxparts=5)";
            si.Connections = connections;
            
            // Create session with username as session name
            _session = si.AddSession(username);
            
            // Set session properties
            _session.Color = GetColorForRole(role);
            
            // Log session start
            _session.LogMessage("=================================");
            _session.LogMessage($"Session started for user: {username}");
            if (role != null) _session.LogMessage($"User role: {role}");
            _session.LogDateTime("Login time", DateTime.Now);
            
            // Log additional user info
            if (_userInfo.Count > 0)
            {
                _session.LogMessage("User additional information:");
                foreach (var info in _userInfo)
                {
                    _session.LogMessage($"{info.Key}: {info.Value}");
                }
            }
            _session.LogMessage("=================================");
        }
        
        /// <summary>
        /// Returns a color based on user role for visual differentiation
        /// </summary>
        private Color GetColorForRole(string role)
        {
            if (string.IsNullOrEmpty(role)) return Color.Black;
            
            switch(role.ToLower())
            {
                case "admin":
                    return Color.Red;
                case "manager":
                    return Color.Blue;
                case "user":
                    return Color.Green;
                default:
                    return Color.Black;
            }
        }
        
        /// <summary>
        /// Gets the username for this session
        /// </summary>
        public string Username => _username;
        
        /// <summary>
        /// Gets the role for this session
        /// </summary>
        public string Role => _role;
        
        /// <summary>
        /// Log user activity with method entry
        /// </summary>
        public void LogMethodEntry(string methodName)
        {
            _session.EnterMethod(methodName);
        }
        
        /// <summary>
        /// Log user activity with method exit
        /// </summary>
        public void LogMethodExit(string methodName)
        {
            _session.LeaveMethod(methodName);
        }
        
        /// <summary>
        /// Log informational message for this user
        /// </summary>
        public void LogInfo(string message)
        {
            _session.LogMessage(message);
        }
        
        /// <summary>
        /// Log warning message for this user
        /// </summary>
        public void LogWarning(string message)
        {
            _session.LogWarning(message);
        }
        
        /// <summary>
        /// Log error message for this user
        /// </summary>
        public void LogError(string message, Exception ex = null)
        {
            if (ex != null)
                _session.LogException(message, ex);
            else
                _session.LogError(message);
        }
        
        /// <summary>
        /// Log debug message for this user
        /// </summary>
        public void LogDebug(string message)
        {
            _session.LogDebug(message);
        }
        
        /// <summary>
        /// Logs a user action with details
        /// </summary>
        public void LogUserAction(string action, string target = null, bool success = true)
        {
            _session.LogMessage($"User Action: {action}" + 
                              (target != null ? $" | Target: {target}" : "") + 
                              $" | Result: {(success ? "Success" : "Failed")}");
        }
        
        /// <summary>
        /// Log data viewing by the user
        /// </summary>
        public void LogDataViewed(string dataType, string identifier)
        {
            _session.LogMessage($"Data accessed - Type: {dataType} | ID: {identifier}");
        }
        
        /// <summary>
        /// Log data modification by the user
        /// </summary>
        public void LogDataModified(string dataType, string identifier, string changeDescription)
        {
            _session.LogMessage($"Data modified - Type: {dataType} | ID: {identifier} | Change: {changeDescription}");
        }
    }

    /// <summary>
    /// Example of how to use the UserSessionLogger in an application
    /// </summary>
    public class UserSessionLoggerExample
    {
        public static void DemoMultiUserLogging()
        {
            // Get logger instance
            var logger = UserSessionLogger.Instance;
            
            try
            {
                // Log actions for admin user
                var adminSession = logger.GetUserSession("admin_user", "admin");
                adminSession.LogInfo("Administrator logged in");
                adminSession.LogMethodEntry("ConfigureSystem");
                adminSession.LogUserAction("Configuration changed", "system_settings", true);
                adminSession.LogMethodExit("ConfigureSystem");
                
                // Log actions for a manager
                var managerSession = logger.GetUserSession("manager1", "manager");
                managerSession.LogInfo("Manager logged in");
                managerSession.LogUserAction("View reports", "sales_report", true);
                managerSession.LogDataViewed("Report", "Q2 Sales");
                
                // Log actions for a regular user
                var userSession = logger.GetUserSession("john_doe", "user");
                userSession.LogInfo("User logged in");
                userSession.LogUserAction("Edit profile", "profile_settings");
                userSession.LogDataModified("UserProfile", "john_doe", "Updated email address");
                
                // Log more admin actions in the same session
                adminSession.LogMethodEntry("CreateUser");
                adminSession.LogUserAction("Create user", "new_employee", true);
                adminSession.LogMethodExit("CreateUser");
                
                // Simulate an error for the user
                try
                {
                    throw new Exception("Permission denied");
                }
                catch (Exception ex)
                {
                    userSession.LogError("Failed to upload document", ex);
                }
                
                // Each user will have their logs in a separate file under D:\SmartInspectTest\Users\{username}\user_log.sil
                Console.WriteLine("User session logging completed successfully.");
                Console.WriteLine("Log files can be found at D:\\SmartInspectTest\\Users\\{username}\\user_log.sil");
            }
            finally
            {
                // Close all logging sessions
                logger.ShutDown();
            }
        }
    }
} 


-------------------------------

// دریافت نمونه لاگر
var logger = UserSessionLogger.Instance;

// ایجاد نشست برای یک کاربر مدیر
var adminSession = logger.GetUserSession("admin_user", "admin");
adminSession.LogInfo("مدیر وارد سیستم شد");
adminSession.LogUserAction("تغییر تنظیمات", "system_settings", true);

// ایجاد نشست برای یک کاربر عادی
var userSession = logger.GetUserSession("john_doe", "user");
userSession.LogInfo("کاربر وارد سیستم شد");
userSession.LogUserAction("ویرایش پروفایل", "profile_settings");
