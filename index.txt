using System;
using System.Diagnostics;
using System.Reflection;
using System.IO;
using System.Collections.Generic;

public class AssemblyDebugHelper
{
    public static void AnalyzeException(Exception ex)
    {
        Console.WriteLine("===== Exception Analysis Using Reflection =====");
        
        // Exception information
        Console.WriteLine($"Exception Type: {ex.GetType().FullName}");
        Console.WriteLine($"Exception Message: {ex.Message}");
        
        // Stack Trace information
        StackTrace st = new StackTrace(ex, true);
        Console.WriteLine("\n===== Stack Trace Details =====");
        
        foreach (StackFrame frame in st.GetFrames())
        {
            MethodBase method = frame.GetMethod();
            
            Console.WriteLine($"\nMethod: {method.Name}");
            Console.WriteLine($"Class: {method.DeclaringType?.FullName}");
            Console.WriteLine($"Assembly: {method.Module.Assembly.FullName}");
            
            // Show file and line information
            if (frame.GetFileName() != null)
            {
                Console.WriteLine($"File: {frame.GetFileName()}");
                Console.WriteLine($"Line: {frame.GetFileLineNumber()}");
                Console.WriteLine($"Column: {frame.GetFileColumnNumber()}");
            }
            
            // Show method parameters
            ParameterInfo[] parameters = method.GetParameters();
            if (parameters.Length > 0)
            {
                Console.WriteLine("Parameters:");
                foreach (var param in parameters)
                {
                    Console.WriteLine($"  - {param.ParameterType.Name} {param.Name}");
                }
            }
        }
        
        // Analyze assembly related to error
        if (st.GetFrames().Length > 0)
        {
            Assembly relevantAssembly = st.GetFrame(0).GetMethod().Module.Assembly;
            AnalyzeAssembly(relevantAssembly);
        }
        
        // Check inner exceptions
        if (ex.InnerException != null)
        {
            Console.WriteLine("\n===== Inner Exception =====");
            AnalyzeException(ex.InnerException);
        }
    }
    
    public static Assembly LoadAssemblyDynamically(string assemblyPath)
    {
        try
        {
            Console.WriteLine($"Attempting to load assembly from: {assemblyPath}");
            
            if (!File.Exists(assemblyPath))
            {
                throw new FileNotFoundException($"Assembly file not found: {assemblyPath}");
            }
            
            // Load the assembly
            Assembly loadedAssembly = Assembly.LoadFrom(assemblyPath);
            Console.WriteLine($"Successfully loaded assembly: {loadedAssembly.FullName}");
            
            // Analyze the loaded assembly
            AnalyzeAssembly(loadedAssembly);
            
            return loadedAssembly;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assembly: {ex.Message}");
            return null;
        }
    }
    
    public static void AnalyzeAssembly(Assembly assembly)
    {
        Console.WriteLine("\n===== Assembly Information =====");
        Console.WriteLine($"Name: {assembly.FullName}");
        Console.WriteLine($"Location: {assembly.Location}");
        
        // Check for PDB file
        string pdbPath = Path.ChangeExtension(assembly.Location, "pdb");
        if (File.Exists(pdbPath))
        {
            Console.WriteLine($"PDB file found: {pdbPath}");
            FileInfo pdbInfo = new FileInfo(pdbPath);
            Console.WriteLine($"PDB file size: {pdbInfo.Length} bytes");
            Console.WriteLine($"PDB creation date: {pdbInfo.CreationTime}");
        }
        else
        {
            Console.WriteLine("No PDB file found for this assembly.");
        }
        
        // Display types in the assembly
        Console.WriteLine("\n===== Types in Assembly =====");
        Type[] types = assembly.GetTypes();
        foreach (Type type in types)
        {
            Console.WriteLine($"Type: {type.FullName}");
        }
    }
    
    public static void InspectMethod(MethodInfo method)
    {
        Console.WriteLine($"\n===== Method Inspection: {method.Name} =====");
        Console.WriteLine($"Return Type: {method.ReturnType.Name}");
        Console.WriteLine($"Is Public: {method.IsPublic}");
        Console.WriteLine($"Is Static: {method.IsStatic}");
        
        // Get IL bytes and display operations
        try
        {
            var methodBody = method.GetMethodBody();
            if (methodBody != null)
            {
                byte[] ilBytes = methodBody.GetILAsByteArray();
                Console.WriteLine($"IL Code Size: {ilBytes.Length} bytes");
                
                // Basic IL byte display (not decoded)
                Console.WriteLine("IL Bytes (hex):");
                for (int i = 0; i < ilBytes.Length; i++)
                {
                    Console.Write($"{ilBytes[i]:X2} ");
                    if ((i + 1) % 16 == 0) Console.WriteLine();
                }
                Console.WriteLine();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Could not access IL code: {ex.Message}");
        }
    }
    
    public static List<Exception> TestAssemblyMethods(Assembly assembly)
    {
        List<Exception> exceptions = new List<Exception>();
        Console.WriteLine("\n===== Testing Methods in Assembly =====");
        
        foreach (Type type in assembly.GetTypes())
        {
            foreach (MethodInfo method in type.GetMethods(BindingFlags.Public | BindingFlags.Static))
            {
                // Only try to invoke methods with no parameters or all optional parameters
                if (method.GetParameters().Length == 0 || 
                    Array.TrueForAll(method.GetParameters(), p => p.IsOptional))
                {
                    try
                    {
                        Console.WriteLine($"Testing method: {type.Name}.{method.Name}()");
                        method.Invoke(null, null);
                        Console.WriteLine("  Result: Success");
                    }
                    catch (Exception ex)
                    {
                        // Unwrap the TargetInvocationException
                        Exception actualEx = ex is TargetInvocationException ? ex.InnerException : ex;
                        Console.WriteLine($"  Result: Failed with {actualEx.GetType().Name}: {actualEx.Message}");
                        exceptions.Add(actualEx);
                    }
                }
            }
        }
        
        return exceptions;
    }
}







-----------------------------------------------------------------------------------------------------------------------





using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Custom Assembly Loader Examples");
        Console.WriteLine("==============================\n");
        
        bool running = true;
        while (running)
        {
            Console.WriteLine("\nSelect an option:");
            Console.WriteLine("1. Load assembly from a specific path");
            Console.WriteLine("2. Load assembly from bytes (useful for embedded assemblies)");
            Console.WriteLine("3. Load assembly by name from a folder");
            Console.WriteLine("4. View all currently loaded assemblies");
            Console.WriteLine("5. Exit");
            
            Console.Write("\nEnter your choice (1-5): ");
            string choice = Console.ReadLine();
            
            switch (choice)
            {
                case "1":
                    LoadAssemblyFromPathExample();
                    break;
                case "2":
                    LoadAssemblyFromBytesExample();
                    break;
                case "3":
                    LoadAssemblyByNameExample();
                    break;
                case "4":
                    ViewLoadedAssembliesExample();
                    break;
                case "5":
                    running = false;
                    break;
                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
        
        Console.WriteLine("\nThank you for using the Custom Assembly Loader.");
    }
    
    static void LoadAssemblyFromPathExample()
    {
        Console.WriteLine("\n--- Load Assembly From Path ---");
        
        Console.Write("Enter the full path to your assembly (.dll or .exe): ");
        string path = Console.ReadLine();
        
        if (string.IsNullOrWhiteSpace(path))
        {
            Console.WriteLine("Path cannot be empty. Operation cancelled.");
            return;
        }
        
        Assembly loadedAssembly = CustomAssemblyLoader.LoadAssemblyFromPath(path);
        
        if (loadedAssembly != null)
        {
            Console.WriteLine($"Successfully loaded: {loadedAssembly.GetName().Name}");
            AskToAnalyzeAssembly(loadedAssembly);
        }
    }
    
    static void LoadAssemblyFromBytesExample()
    {
        Console.WriteLine("\n--- Load Assembly From Bytes ---");
        
        Console.Write("Enter the path to your assembly file to be loaded as bytes: ");
        string path = Console.ReadLine();
        
        if (string.IsNullOrWhiteSpace(path) || !File.Exists(path))
        {
            Console.WriteLine("Invalid file path or file does not exist. Operation cancelled.");
            return;
        }
        
        byte[] assemblyBytes = File.ReadAllBytes(path);
        
        // Check for PDB file
        string pdbPath = Path.ChangeExtension(path, "pdb");
        byte[] pdbBytes = null;
        
        if (File.Exists(pdbPath))
        {
            Console.WriteLine($"PDB file found at: {pdbPath}");
            Console.Write("Do you want to include PDB data for debugging? (y/n): ");
            if (Console.ReadLine().Trim().ToLower() == "y")
            {
                pdbBytes = File.ReadAllBytes(pdbPath);
                Console.WriteLine($"Loaded {pdbBytes.Length} bytes from PDB file.");
            }
        }
        
        Assembly loadedAssembly = CustomAssemblyLoader.LoadAssemblyFromBytes(assemblyBytes, pdbBytes);
        
        if (loadedAssembly != null)
        {
            Console.WriteLine($"Successfully loaded assembly from bytes: {loadedAssembly.GetName().Name}");
            AskToAnalyzeAssembly(loadedAssembly);
        }
    }
    
    static void LoadAssemblyByNameExample()
    {
        Console.WriteLine("\n--- Load Assembly By Name ---");
        
        Console.Write("Enter the name of the assembly to load (without extension): ");
        string name = Console.ReadLine();
        
        if (string.IsNullOrWhiteSpace(name))
        {
            Console.WriteLine("Assembly name cannot be empty. Operation cancelled.");
            return;
        }
        
        Console.Write("Enter a folder path to search in (or press Enter to use default paths): ");
        string folderPath = Console.ReadLine();
        
        if (string.IsNullOrWhiteSpace(folderPath))
        {
            folderPath = null;
        }
        else if (!Directory.Exists(folderPath))
        {
            Console.WriteLine("Directory does not exist. Using default paths instead.");
            folderPath = null;
        }
        
        Assembly loadedAssembly = CustomAssemblyLoader.LoadAssemblyByName(name, folderPath);
        
        if (loadedAssembly != null)
        {
            Console.WriteLine($"Successfully loaded assembly by name: {loadedAssembly.GetName().Name}");
            AskToAnalyzeAssembly(loadedAssembly);
        }
    }
    
    static void ViewLoadedAssembliesExample()
    {
        Console.WriteLine("\n--- View Loaded Assemblies ---");
        
        Assembly[] assemblies = CustomAssemblyLoader.GetLoadedAssemblies();
        Console.WriteLine($"Currently {assemblies.Length} assemblies are loaded:");
        
        for (int i = 0; i < assemblies.Length; i++)
        {
            Console.WriteLine($"{i+1}. {assemblies[i].GetName().Name} - {assemblies[i].GetName().Version}");
        }
        
        Console.Write("\nEnter the number of an assembly to analyze (or press Enter to skip): ");
        string input = Console.ReadLine();
        
        if (!string.IsNullOrWhiteSpace(input) && int.TryParse(input, out int index) && index > 0 && index <= assemblies.Length)
        {
            CustomAssemblyLoader.AnalyzeAssembly(assemblies[index-1]);
        }
    }
    
    static void AskToAnalyzeAssembly(Assembly assembly)
    {
        Console.Write("Do you want to analyze this assembly? (y/n): ");
        if (Console.ReadLine().Trim().ToLower() == "y")
        {
            CustomAssemblyLoader.AnalyzeAssembly(assembly);
            
            // Additional options for the loaded assembly
            Console.WriteLine("\nWhat would you like to do with this assembly?");
            Console.WriteLine("1. Examine specific type");
            Console.WriteLine("2. Execute a static method");
            Console.WriteLine("3. Nothing more");
            
            Console.Write("Enter your choice (1-3): ");
            string choice = Console.ReadLine();
            
            switch (choice)
            {
                case "1":
                    ExamineTypeInAssembly(assembly);
                    break;
                case "2":
                    ExecuteStaticMethodInAssembly(assembly);
                    break;
                default:
                    // Do nothing
                    break;
            }
        }
    }
    
    static void ExamineTypeInAssembly(Assembly assembly)
    {
        Console.WriteLine("\n--- Examine Type In Assembly ---");
        
        // Get all types in the assembly
        Type[] types = assembly.GetTypes();
        Console.WriteLine($"Assembly contains {types.Length} types.");
        
        // Display types for selection
        for (int i = 0; i < Math.Min(types.Length, 20); i++) // Show first 20 to avoid cluttering console
        {
            Console.WriteLine($"{i+1}. {types[i].FullName}");
        }
        
        if (types.Length > 20)
        {
            Console.WriteLine("(Only showing first 20 types)");
            Console.Write("Enter type name or number: ");
        }
        else
        {
            Console.Write("Enter the number of the type to examine: ");
        }
        
        string input = Console.ReadLine();
        Type selectedType = null;
        
        // Try to parse as a number first
        if (int.TryParse(input, out int typeIndex) && typeIndex > 0 && typeIndex <= types.Length)
        {
            selectedType = types[typeIndex - 1];
        }
        else
        {
            // Try to find by name
            selectedType = types.FirstOrDefault(t => t.FullName.Contains(input));
        }
        
        if (selectedType != null)
        {
            Console.WriteLine($"\nExamining type: {selectedType.FullName}");
            Console.WriteLine($"Base Type: {selectedType.BaseType?.FullName ?? "None"}");
            Console.WriteLine($"Is Class: {selectedType.IsClass}");
            Console.WriteLine($"Is Interface: {selectedType.IsInterface}");
            Console.WriteLine($"Is Abstract: {selectedType.IsAbstract}");
            Console.WriteLine($"Is Sealed: {selectedType.IsSealed}");
            
            // Display properties
            PropertyInfo[] properties = selectedType.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
            Console.WriteLine($"\nProperties ({properties.Length}):");
            foreach (PropertyInfo property in properties)
            {
                Console.WriteLine($"  {property.PropertyType.Name} {property.Name} {{ get; {(property.CanWrite ? "set;" : "")} }}");
            }
            
            // Display methods
            MethodInfo[] methods = selectedType.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);
            Console.WriteLine($"\nMethods ({methods.Length}):");
            foreach (MethodInfo method in methods)
            {
                string parameters = string.Join(", ", method.GetParameters().Select(p => $"{p.ParameterType.Name} {p.Name}"));
                Console.WriteLine($"  {method.ReturnType.Name} {method.Name}({parameters})");
            }
        }
        else
        {
            Console.WriteLine("Type not found.");
        }
    }
    
    static void ExecuteStaticMethodInAssembly(Assembly assembly)
    {
        Console.WriteLine("\n--- Execute Static Method In Assembly ---");
        
        // Get all types with static methods that have no parameters or all optional parameters
        List<MethodInfo> executableMethods = new List<MethodInfo>();
        
        foreach (Type type in assembly.GetTypes())
        {
            foreach (MethodInfo method in type.GetMethods(BindingFlags.Public | BindingFlags.Static))
            {
                if (method.GetParameters().Length == 0 || method.GetParameters().All(p => p.IsOptional))
                {
                    executableMethods.Add(method);
                }
            }
        }
        
        if (executableMethods.Count == 0)
        {
            Console.WriteLine("No executable static methods found in this assembly.");
            return;
        }
        
        Console.WriteLine($"Found {executableMethods.Count} executable static methods:");
        
        for (int i = 0; i < executableMethods.Count; i++)
        {
            MethodInfo method = executableMethods[i];
            Console.WriteLine($"{i+1}. {method.DeclaringType.FullName}.{method.Name}()");
        }
        
        Console.Write("Enter the number of the method to execute: ");
        if (int.TryParse(Console.ReadLine(), out int methodIndex) && methodIndex > 0 && methodIndex <= executableMethods.Count)
        {
            MethodInfo selectedMethod = executableMethods[methodIndex - 1];
            
            try
            {
                Console.WriteLine($"Executing {selectedMethod.DeclaringType.FullName}.{selectedMethod.Name}()...");
                object result = selectedMethod.Invoke(null, null);
                
                if (selectedMethod.ReturnType != typeof(void))
                {
                    Console.WriteLine($"Method returned: {result}");
                }
                else
                {
                    Console.WriteLine("Method executed successfully (void return type).");
                }
            }
            catch (Exception ex)
            {
                // Unwrap TargetInvocationException
                Exception actualException = ex is TargetInvocationException ? ex.InnerException : ex;
                Console.WriteLine($"Error executing method: {actualException.Message}");
                Console.WriteLine($"Stack Trace: {actualException.StackTrace}");
            }
        }
        else
        {
            Console.WriteLine("Invalid selection.");
        }
    }
}


-----------------------------------------------------------------------------------------------------------



using System;
using System.Reflection;
using System.IO;
using System.Collections.Generic;

public class CustomAssemblyLoader
{
    // Dictionary to keep track of loaded assemblies to prevent reloading
    private static Dictionary<string, Assembly> loadedAssemblies = new Dictionary<string, Assembly>();
    
    /// <summary>
    /// Loads an assembly from a file path
    /// </summary>
    /// <param name="assemblyPath">Full path to the assembly file (.dll or .exe)</param>
    /// <returns>The loaded assembly or null if loading failed</returns>
    public static Assembly LoadAssemblyFromPath(string assemblyPath)
    {
        try
        {
            Console.WriteLine($"Attempting to load assembly from: {assemblyPath}");
            
            if (!File.Exists(assemblyPath))
            {
                throw new FileNotFoundException($"Assembly file not found: {assemblyPath}");
            }
            
            // Check if already loaded to prevent duplicate loading
            string fullPath = Path.GetFullPath(assemblyPath);
            if (loadedAssemblies.ContainsKey(fullPath))
            {
                Console.WriteLine($"Assembly already loaded: {fullPath}");
                return loadedAssemblies[fullPath];
            }
            
            // Load the assembly
            Assembly loadedAssembly = Assembly.LoadFrom(fullPath);
            Console.WriteLine($"Successfully loaded assembly: {loadedAssembly.FullName}");
            
            // Store in dictionary
            loadedAssemblies[fullPath] = loadedAssembly;
            
            return loadedAssembly;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assembly: {ex.Message}");
            return null;
        }
    }
    
    /// <summary>
    /// Loads an assembly from a byte array
    /// </summary>
    /// <param name="assemblyBytes">The raw bytes of the assembly</param>
    /// <param name="pdbBytes">Optional PDB file bytes for debugging information</param>
    /// <returns>The loaded assembly or null if loading failed</returns>
    public static Assembly LoadAssemblyFromBytes(byte[] assemblyBytes, byte[] pdbBytes = null)
    {
        try
        {
            Console.WriteLine($"Attempting to load assembly from byte array of size: {assemblyBytes.Length} bytes");
            
            Assembly loadedAssembly;
            if (pdbBytes != null && pdbBytes.Length > 0)
            {
                Console.WriteLine($"Loading with PDB data of size: {pdbBytes.Length} bytes");
                loadedAssembly = Assembly.Load(assemblyBytes, pdbBytes);
            }
            else
            {
                loadedAssembly = Assembly.Load(assemblyBytes);
            }
            
            Console.WriteLine($"Successfully loaded assembly: {loadedAssembly.FullName}");
            return loadedAssembly;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assembly from bytes: {ex.Message}");
            return null;
        }
    }
    
    /// <summary>
    /// Loads an assembly from a specified folder with a given name
    /// </summary>
    /// <param name="assemblyName">Name of the assembly without extension</param>
    /// <param name="folderPath">Folder path to search in</param>
    /// <returns>The loaded assembly or null if loading failed</returns>
    public static Assembly LoadAssemblyByName(string assemblyName, string folderPath = null)
    {
        try
        {
            Console.WriteLine($"Attempting to load assembly by name: {assemblyName}");
            
            // If folder is specified, look there first
            if (!string.IsNullOrEmpty(folderPath))
            {
                string dllPath = Path.Combine(folderPath, $"{assemblyName}.dll");
                string exePath = Path.Combine(folderPath, $"{assemblyName}.exe");
                
                if (File.Exists(dllPath))
                {
                    return LoadAssemblyFromPath(dllPath);
                }
                else if (File.Exists(exePath))
                {
                    return LoadAssemblyFromPath(exePath);
                }
            }
            
            // Try to load from the standard assembly resolution mechanism
            Assembly loadedAssembly = Assembly.Load(assemblyName);
            Console.WriteLine($"Successfully loaded assembly: {loadedAssembly.FullName}");
            return loadedAssembly;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading assembly by name: {ex.Message}");
            return null;
        }
    }
    
    /// <summary>
    /// Gets a list of all currently loaded assemblies
    /// </summary>
    /// <returns>Array of loaded assemblies</returns>
    public static Assembly[] GetLoadedAssemblies()
    {
        return AppDomain.CurrentDomain.GetAssemblies();
    }
    
    /// <summary>
    /// Analyzes an assembly and displays its details
    /// </summary>
    /// <param name="assembly">The assembly to analyze</param>
    public static void AnalyzeAssembly(Assembly assembly)
    {
        Console.WriteLine("\n===== Assembly Information =====");
        Console.WriteLine($"Name: {assembly.FullName}");
        Console.WriteLine($"Location: {assembly.Location}");
        
        // Check for referenced assemblies
        AssemblyName[] referencedAssemblies = assembly.GetReferencedAssemblies();
        Console.WriteLine($"\nReferenced Assemblies ({referencedAssemblies.Length}):");
        foreach (AssemblyName asmName in referencedAssemblies)
        {
            Console.WriteLine($"  - {asmName.Name}, Version: {asmName.Version}");
        }
        
        // Check for PDB file
        string pdbPath = Path.ChangeExtension(assembly.Location, "pdb");
        if (File.Exists(pdbPath))
        {
            Console.WriteLine($"\nPDB file found: {pdbPath}");
            FileInfo pdbInfo = new FileInfo(pdbPath);
            Console.WriteLine($"PDB file size: {pdbInfo.Length} bytes");
            Console.WriteLine($"PDB creation date: {pdbInfo.CreationTime}");
        }
        else
        {
            Console.WriteLine("\nNo PDB file found for this assembly.");
        }
        
        // Display information about types
        Type[] types = assembly.GetTypes();
        Console.WriteLine($"\nTypes in Assembly ({types.Length}):");
        foreach (Type type in types)
        {
            Console.WriteLine($"  - {type.FullName}");
            
            // Display public methods for each type
            MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
            if (methods.Length > 0)
            {
                Console.WriteLine($"    Methods ({methods.Length}):");
                foreach (MethodInfo method in methods.Take(5)) // Only show first 5 to avoid clutter
                {
                    string parameters = string.Join(", ", method.GetParameters().Select(p => $"{p.ParameterType.Name} {p.Name}"));
                    Console.WriteLine($"      {method.ReturnType.Name} {method.Name}({parameters})");
                }
                
                if (methods.Length > 5)
                {
                    Console.WriteLine($"      ... and {methods.Length - 5} more methods");
                }
            }
        }
    }
}


ـ----------------------------------------------------------------------------------------------------------------------
