using System;
using System.IO;
using System.Xml.Linq;
using System.Linq;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("لطفاً مسیر پروژه را وارد کنید:");
        string projectPath = Console.ReadLine();

        if (!Directory.Exists(projectPath))
        {
            Console.WriteLine("مسیر وارد شده معتبر نیست!");
            return;
        }

        try
        {
            ProcessProjects(projectPath);
            Console.WriteLine("عملیات با موفقیت انجام شد.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"خطا در اجرای برنامه: {ex.Message}");
        }
    }

    static void ProcessProjects(string rootPath)
    {
        var projectFiles = Directory.GetFiles(rootPath, "*.csproj", SearchOption.AllDirectories);
        
        foreach (var projectFile in projectFiles)
        {
            var references = GetProjectReferences(projectFile);
            SaveReferencesToFile(projectFile, references);
        }
    }

    static List<string> GetProjectReferences(string projectFile)
    {
        var references = new List<string>();
        var doc = XDocument.Load(projectFile);
        var root = doc.Root;

        // بررسی نوع پروژه (SDK-style یا قدیمی)
        bool isSdkStyle = root.Attribute("Sdk") != null;

        if (isSdkStyle)
        {
            // پردازش رفرنس‌های SDK-style
            var packageRefs = root.Descendants("PackageReference")
                .Select(x => $"Package: {x.Attribute("Include")?.Value} - Version: {x.Attribute("Version")?.Value}");
            
            var projectRefs = root.Descendants("ProjectReference")
                .Select(x => $"Project: {x.Attribute("Include")?.Value}");

            references.AddRange(packageRefs);
            references.AddRange(projectRefs);
        }
        else
        {
            // پردازش رفرنس‌های فرمت قدیمی
            var assemblyRefs = root.Descendants()
                .Where(x => x.Name.LocalName == "Reference")
                .Select(x => $"Assembly: {x.Attribute("Include")?.Value}");

            var projectRefs = root.Descendants()
                .Where(x => x.Name.LocalName == "ProjectReference")
                .Select(x => $"Project: {x.Attribute("Include")?.Value}");

            references.AddRange(assemblyRefs);
            references.AddRange(projectRefs);
        }

        return references;
    }

    static void SaveReferencesToFile(string projectFile, List<string> references)
    {
        var projectName = Path.GetFileNameWithoutExtension(projectFile);
        var outputPath = Path.Combine(
            Path.GetDirectoryName(projectFile), 
            $"{projectName}_References.txt"
        );

        var content = new List<string>
        {
            $"رفرنس‌های پروژه: {projectName}",
            $"مسیر پروژه: {projectFile}",
            "----------------------------------------",
            string.Empty
        };

        content.AddRange(references);

        File.WriteAllLines(outputPath, content);
    }
}
