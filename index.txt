using System;
using System.Collections.Generic;
using System.Diagnostics;

public class PerformanceTracker
{
    private Stopwatch totalStopwatch;
    private Dictionary<string, TimeSpan> sectionTimes;
    private string currentSection;
    private DateTime sectionStartTime;
    private string name; // نام زمان‌سنج
    
    // سازنده با نام اختیاری
    public PerformanceTracker(string name = "Default")
    {
        totalStopwatch = new Stopwatch();
        sectionTimes = new Dictionary<string, TimeSpan>();
        this.name = name;
    }
    
    // دریافت و تنظیم نام
    public string Name
    {
        get { return name; }
        set { name = value; }
    }
    
    public void Start()
    {
        totalStopwatch.Start();
    }
    
    public void StartSection(string sectionName)
    {
        // اگر بخش قبلی در حال اجراست، آن را به پایان برسان
        if (!string.IsNullOrEmpty(currentSection))
        {
            EndSection();
        }
        
        currentSection = sectionName;
        sectionStartTime = DateTime.Now;
        
        // اگر این بخش قبلاً اندازه‌گیری شده، مقدار آن را صفر کن
        if (sectionTimes.ContainsKey(sectionName))
        {
            sectionTimes[sectionName] = TimeSpan.Zero;
        }
        else
        {
            sectionTimes.Add(sectionName, TimeSpan.Zero);
        }
    }
    
    public void EndSection()
    {
        if (string.IsNullOrEmpty(currentSection))
            return;
            
        TimeSpan elapsed = DateTime.Now - sectionStartTime;
        sectionTimes[currentSection] += elapsed;
        currentSection = null;
    }
    
    public void Stop()
    {
        if (!string.IsNullOrEmpty(currentSection))
        {
            EndSection();
        }
        
        totalStopwatch.Stop();
    }
    
    public void PrintResults()
    {
        Console.WriteLine($"=== نتایج اندازه‌گیری عملکرد [{name}] ===");
        foreach (var section in sectionTimes)
        {
            PrintFormattedTime(section.Key, section.Value);
        }
        PrintFormattedTime("زمان کل", totalStopwatch.Elapsed);
    }
    
    private void PrintFormattedTime(string sectionName, TimeSpan time)
    {
        if (time.TotalSeconds < 0.01) // کمتر از 10 میلی‌ثانیه
        {
            Console.WriteLine($"{sectionName}: {time.TotalMilliseconds:F3} میلی‌ثانیه");
        }
        else if (time.TotalMinutes < 1) // کمتر از یک دقیقه
        {
            Console.WriteLine($"{sectionName}: {time.TotalSeconds:F3} ثانیه");
        }
        else if (time.TotalHours < 1) // کمتر از یک ساعت
        {
            Console.WriteLine($"{sectionName}: {time.Minutes} دقیقه و {time.Seconds} ثانیه");
        }
        else // بیشتر از یک ساعت
        {
            Console.WriteLine($"{sectionName}: {time.Hours} ساعت و {time.Minutes} دقیقه و {time.Seconds} ثانیه");
        }
    }
    
    // گرفتن نتایج به صورت دیکشنری
    public Dictionary<string, TimeSpan> GetResults()
    {
        return new Dictionary<string, TimeSpan>(sectionTimes);
    }
    
    // گرفتن زمان کل
    public TimeSpan GetTotalTime()
    {
        return totalStopwatch.Elapsed;
    }
    
    // نمایش نتایج با فرمت دلخواه
    public void PrintResultsAs(TimeFormat format)
    {
        Console.WriteLine($"=== نتایج اندازه‌گیری عملکرد [{name}] ===");
        foreach (var section in sectionTimes)
        {
            PrintTimeInFormat(section.Key, section.Value, format);
        }
        PrintTimeInFormat("زمان کل", totalStopwatch.Elapsed, format);
    }
    
    private void PrintTimeInFormat(string sectionName, TimeSpan time, TimeFormat format)
    {
        switch (format)
        {
            case TimeFormat.Nanoseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds * 1000000:F0} نانوثانیه");
                break;
            case TimeFormat.Microseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds * 1000:F0} میکروثانیه");
                break;
            case TimeFormat.Milliseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds:F3} میلی‌ثانیه");
                break;
            case TimeFormat.Seconds:
                Console.WriteLine($"{sectionName}: {time.TotalSeconds:F6} ثانیه");
                break;
            case TimeFormat.Minutes:
                Console.WriteLine($"{sectionName}: {time.TotalMinutes:F6} دقیقه");
                break;
            case TimeFormat.Auto:
            default:
                PrintFormattedTime(sectionName, time);
                break;
        }
    }
}

// انواع فرمت‌های زمانی
public enum TimeFormat
{
    Auto,           // انتخاب خودکار بهترین واحد
    Nanoseconds,    // نانوثانیه
    Microseconds,   // میکروثانیه
    Milliseconds,   // میلی‌ثانیه
    Seconds,        // ثانیه
    Minutes         // دقیقه
}

// مثال استفاده
class Program
{
    static void Main(string[] args)
    {
        // مثال 1: استفاده از یک نمونه Performance Tracker با نام
        Console.WriteLine("مثال 1: استفاده از یک نمونه زمان‌سنج با نام");
        PerformanceTracker tracker = new PerformanceTracker("پردازش اصلی");
        tracker.Start();
        
        tracker.StartSection("مرحله آماده‌سازی داده‌ها");
        ProcessSection1();
        tracker.EndSection();
        
        tracker.StartSection("مرحله پردازش");
        ProcessSection2();
        tracker.EndSection();
        
        tracker.StartSection("مرحله ذخیره‌سازی");
        ProcessSection3();
        tracker.EndSection();
        
        tracker.Stop();
        tracker.PrintResults();
        
        // مثال 2: استفاده از چندین نمونه Performance Tracker
        Console.WriteLine("\nمثال 2: استفاده از چندین نمونه زمان‌سنج در کلاس‌های مختلف");
        SimulateMultipleClasses();
    }
    
    static void ProcessSection1()
    {
        System.Threading.Thread.Sleep(100);
    }
    
    static void ProcessSection2()
    {
        System.Threading.Thread.Sleep(200);
    }
    
    static void ProcessSection3()
    {
        System.Threading.Thread.Sleep(150);
    }
    
    static void SimulateMultipleClasses()
    {
        // شبیه‌سازی استفاده از چندین نمونه زمان‌سنج در کلاس‌های مختلف
        PerformanceTracker dataProcessorTracker = new PerformanceTracker("پردازشگر داده");
        PerformanceTracker fileManagerTracker = new PerformanceTracker("مدیریت فایل");
        PerformanceTracker calculationTracker = new PerformanceTracker("محاسبات");
        
        // شبیه‌سازی استفاده در کلاس پردازشگر داده
        dataProcessorTracker.Start();
        dataProcessorTracker.StartSection("خواندن داده");
        System.Threading.Thread.Sleep(80);
        dataProcessorTracker.EndSection();
        
        dataProcessorTracker.StartSection("پردازش داده");
        System.Threading.Thread.Sleep(120);
        dataProcessorTracker.EndSection();
        dataProcessorTracker.Stop();
        
        // شبیه‌سازی استفاده در کلاس مدیریت فایل
        fileManagerTracker.Start();
        fileManagerTracker.StartSection("جستجوی فایل");
        System.Threading.Thread.Sleep(50);
        fileManagerTracker.EndSection();
        
        fileManagerTracker.StartSection("نوشتن فایل");
        System.Threading.Thread.Sleep(100);
        fileManagerTracker.EndSection();
        fileManagerTracker.Stop();
        
        // شبیه‌سازی استفاده در کلاس محاسبات
        calculationTracker.Start();
        calculationTracker.StartSection("محاسبه میانگین");
        System.Threading.Thread.Sleep(30);
        calculationTracker.EndSection();
        
        calculationTracker.StartSection("محاسبه انحراف معیار");
        System.Threading.Thread.Sleep(40);
        calculationTracker.EndSection();
        calculationTracker.Stop();
        
        // نمایش نتایج همه زمان‌سنج‌ها
        dataProcessorTracker.PrintResults();
        fileManagerTracker.PrintResults();
        calculationTracker.PrintResults();
        
        // نمایش نتایج با فرمت‌های مختلف برای یکی از زمان‌سنج‌ها
        Console.WriteLine("\n=== نمایش نتایج محاسبات با فرمت‌های مختلف ===");
        calculationTracker.PrintResultsAs(TimeFormat.Milliseconds);
        calculationTracker.PrintResultsAs(TimeFormat.Microseconds);
    }
}
