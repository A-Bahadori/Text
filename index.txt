using System;
using System.Collections.Generic;
using System.Diagnostics;

public class PerformanceTracker
{
    private Stopwatch totalStopwatch;
    private Dictionary<string, TimeSpan> sectionTimes;
    private string currentSection;
    private DateTime sectionStartTime;
    private string name; // Timer name

    // Constructor with optional name
    public PerformanceTracker(string name = "Default")
    {
        totalStopwatch = new Stopwatch();
        sectionTimes = new Dictionary<string, TimeSpan>();
        this.name = name;
    }

    // Get and set the name
    public string Name
    {
        get { return name; }
        set { name = value; }
    }

    public void Start()
    {
        totalStopwatch.Start();
    }

    public void StartSection(string sectionName)
    {
        // If a previous section is running, end it
        if (!string.IsNullOrEmpty(currentSection))
        {
            EndSection();
        }

        currentSection = sectionName;
        sectionStartTime = DateTime.Now;

        // If this section was previously measured, reset its time
        if (sectionTimes.ContainsKey(sectionName))
        {
            sectionTimes[sectionName] = TimeSpan.Zero;
        }
        else
        {
            sectionTimes.Add(sectionName, TimeSpan.Zero);
        }
    }

    public void EndSection()
    {
        if (string.IsNullOrEmpty(currentSection))
            return;

        TimeSpan elapsed = DateTime.Now - sectionStartTime;
        sectionTimes[currentSection] += elapsed;
        currentSection = null;
    }

    public void Stop()
    {
        if (!string.IsNullOrEmpty(currentSection))
        {
            EndSection();
        }

        totalStopwatch.Stop();
    }

    public void PrintResults()
    {
        Console.WriteLine($"=== Performance Measurement Results [{name}] ===");
        foreach (var section in sectionTimes)
        {
            PrintFormattedTime(section.Key, section.Value);
        }
        PrintFormattedTime("Total Time", totalStopwatch.Elapsed);
    }

    private void PrintFormattedTime(string sectionName, TimeSpan time)
    {
        if (time.TotalSeconds < 0.01) // less than 10 milliseconds
        {
            Console.WriteLine($"{sectionName}: {time.TotalMilliseconds:F3} milliseconds");
        }
        else if (time.TotalMinutes < 1) // less than one minute
        {
            Console.WriteLine($"{sectionName}: {time.TotalSeconds:F3} seconds");
        }
        else if (time.TotalHours < 1) // less than one hour
        {
            Console.WriteLine($"{sectionName}: {time.Minutes} minutes and {time.Seconds} seconds");
        }
        else // more than one hour
        {
            Console.WriteLine($"{sectionName}: {time.Hours} hours, {time.Minutes} minutes, and {time.Seconds} seconds");
        }
    }

    // Retrieve results as a dictionary
    public Dictionary<string, TimeSpan> GetResults()
    {
        return new Dictionary<string, TimeSpan>(sectionTimes);
    }

    // Retrieve total time
    public TimeSpan GetTotalTime()
    {
        return totalStopwatch.Elapsed;
    }

    // Display results in a specified format
    public void PrintResultsAs(TimeFormat format)
    {
        Console.WriteLine($"=== Performance Measurement Results [{name}] ===");
        foreach (var section in sectionTimes)
        {
            PrintTimeInFormat(section.Key, section.Value, format);
        }
        PrintTimeInFormat("Total Time", totalStopwatch.Elapsed, format);
    }

    private void PrintTimeInFormat(string sectionName, TimeSpan time, TimeFormat format)
    {
        switch (format)
        {
            case TimeFormat.Nanoseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds * 1_000_000:F0} nanoseconds");
                break;
            case TimeFormat.Microseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds * 1_000:F0} microseconds");
                break;
            case TimeFormat.Milliseconds:
                Console.WriteLine($"{sectionName}: {time.TotalMilliseconds:F3} milliseconds");
                break;
            case TimeFormat.Seconds:
                Console.WriteLine($"{sectionName}: {time.TotalSeconds:F6} seconds");
                break;
            case TimeFormat.Minutes:
                Console.WriteLine($"{sectionName}: {time.TotalMinutes:F6} minutes");
                break;
            case TimeFormat.Auto:
            default:
                PrintFormattedTime(sectionName, time);
                break;
        }
    }
}

// Time format types
public enum TimeFormat
{
    Auto,           // Auto-select the best unit
    Nanoseconds,    // Nanoseconds
    Microseconds,   // Microseconds
    Milliseconds,   // Milliseconds
    Seconds,        // Seconds
    Minutes         // Minutes
}

// Usage example
class Program
{
    static void Main(string[] args)
    {
        // Example 1: Using a named Performance Tracker
        Console.WriteLine("Example 1: Using a named Performance Tracker");
        PerformanceTracker tracker = new PerformanceTracker("Main Processing");
        tracker.Start();

        tracker.StartSection("Data Preparation Stage");
        ProcessSection1();
        tracker.EndSection();

        tracker.StartSection("Processing Stage");
        ProcessSection2();
        tracker.EndSection();

        tracker.StartSection("Storage Stage");
        ProcessSection3();
        tracker.EndSection();

        tracker.Stop();
        tracker.PrintResults();

        // Example 2: Using multiple Performance Tracker instances in different classes
        Console.WriteLine("\nExample 2: Using multiple Performance Tracker instances in different classes");
        SimulateMultipleClasses();
    }

    static void ProcessSection1()
    {
        System.Threading.Thread.Sleep(100);
    }

    static void ProcessSection2()
    {
        System.Threading.Thread.Sleep(200);
    }

    static void ProcessSection3()
    {
        System.Threading.Thread.Sleep(150);
    }

    static void SimulateMultipleClasses()
    {
        // Simulate using multiple tracker instances across classes
        PerformanceTracker dataProcessorTracker = new PerformanceTracker("Data Processor");
        PerformanceTracker fileManagerTracker = new PerformanceTracker("File Manager");
        PerformanceTracker calculationTracker = new PerformanceTracker("Calculations");

        // Data Processor class simulation
        dataProcessorTracker.Start();
        dataProcessorTracker.StartSection("Reading Data");
        System.Threading.Thread.Sleep(80);
        dataProcessorTracker.EndSection();

        dataProcessorTracker.StartSection("Processing Data");
        System.Threading.Thread.Sleep(120);
        dataProcessorTracker.EndSection();
        dataProcessorTracker.Stop();

        // File Manager class simulation
        fileManagerTracker.Start();
        fileManagerTracker.StartSection("File Search");
        System.Threading.Thread.Sleep(50);
        fileManagerTracker.EndSection();

        fileManagerTracker.StartSection("File Write");
        System.Threading.Thread.Sleep(100);
        fileManagerTracker.EndSection();
        fileManagerTracker.Stop();

        // Calculations class simulation
        calculationTracker.Start();
        calculationTracker.StartSection("Calculating Average");
        System.Threading.Thread.Sleep(30);
        calculationTracker.EndSection();

        calculationTracker.StartSection("Calculating Standard Deviation");
        System.Threading.Thread.Sleep(40);
        calculationTracker.EndSection();
        calculationTracker.Stop();

        // Display all tracker results
        dataProcessorTracker.PrintResults();
        fileManagerTracker.PrintResults();
        calculationTracker.PrintResults();

        // Display calculation results in various formats
        Console.WriteLine("\n=== Displaying calculation results in various formats ===");
        calculationTracker.PrintResultsAs(TimeFormat.Milliseconds);
        calculationTracker.PrintResultsAs(TimeFormat.Microseconds);
    }
}
