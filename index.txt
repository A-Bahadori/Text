public class Startup
{
    private readonly string _frontPath;

    public Startup()
    {
        // تعیین مسیر فایل‌های استاتیک (Front)
        var currentDirectory = Directory.GetCurrentDirectory();
        _frontPath = Path.Combine(currentDirectory, "Front");
    }

    public void ConfigureServices(IServiceCollection services)
    {
        // ثبت سرویس‌ها (Dependency Injection)
        // در اینجا می‌توانید سرویس‌های دیگر را ثبت کنید.
    }

    public void Configure(IApplicationBuilder app)
    {
        // تنظیم مسیر فایل‌های استاتیک
        app.UseWebRoot(_frontPath);

        // استفاده از فایل‌های استاتیک و فایل‌های پیش‌فرض
        app.UseDefaultFiles();
        app.UseStaticFiles();

        // تعریف API‌ها
        app.MapGet("/sum", (int a, int b) => a + b);
        app.MapGet("/sub", (int a, int b) => a - b);
        app.MapGet("/mul", (int a, int b) => a * b);
        app.MapGet("/division", (int a, int b) =>
        {
            if (b == 0)
                throw new DivideByZeroException("Division by zero is not allowed.");
            return a / b;
        });

        // مدیریت خطاها
        app.MapGet("/Exception", (HttpContext context) =>
        {
            var errorMessage = context.Request.Query["message"].ToString();
            throw new ApplicationException(errorMessage ?? "Error");
        });
    }
}





public void Configure(IApplicationBuilder app)
{
    // تنظیم مسیر فایل‌های استاتیک
    app.UseWebRoot(_frontPath);

    // استفاده از فایل‌های استاتیک و فایل‌های پیش‌فرض
    app.UseDefaultFiles();
    app.UseStaticFiles();

    // تبدیل IApplicationBuilder به WebApplication
    var webApp = app as WebApplication;
    if (webApp != null)
    {
        webApp.MapGet("/sum", (int a, int b) => a + b);
        webApp.MapGet("/sub", (int a, int b) => a - b);
        webApp.MapGet("/mul", (int a, int b) => a * b);
        webApp.MapGet("/division", (int a, int b) =>
        {
            if (b == 0)
                throw new DivideByZeroException("Division by zero is not allowed.");
            return a / b;
        });

        webApp.MapGet("/Exception", (HttpContext context) =>
        {
            var errorMessage = context.Request.Query["message"].ToString();
            throw new ApplicationException(errorMessage ?? "Error");
        });
    }
}









using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

var builder = WebApplication.CreateBuilder(new WebApplicationOptions
{
    // تنظیمات اختیاری برای Content Root
});

// استفاده از کلاس Startup
var startup = new Startup();
startup.ConfigureServices(builder.Services);

var app = builder.Build();

// تنظیم محیط اجرا
startup.Configure(app);

app.Run();










WebRootExtensions.cs
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.FileProviders;
using System.IO;

public static class WebRootExtensions
{
    public static IApplicationBuilder UseWebRoot(this IApplicationBuilder app, string webRootPath)
    {
        if (!Directory.Exists(webRootPath))
        {
            throw new DirectoryNotFoundException($"Web root path '{webRootPath}' does not exist.");
        }

        var fileProvider = new PhysicalFileProvider(webRootPath);
        app.UseStaticFiles(new StaticFileOptions
        {
            FileProvider = fileProvider
        });

        return app;
    }
}

--------------------------------------------------------------------------------------------------------------
GPT


using System;
using System.IO;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;

public class Startup
{
    public Startup(IConfiguration configuration)
    {
        Configuration = configuration;
    }
    
    public IConfiguration Configuration { get; }

    // در صورت نیاز می‌توانید سرویس‌های مورد نظر خود را ثبت کنید.
    public void ConfigureServices(IServiceCollection services)
    {
        // اینجا اگر سرویس‌هایی مانند MVC یا غیره نیاز دارید ثبت کنید.
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        // تنظیم محیط اجرا
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }
        else
        {
            app.UseExceptionHandler("/error");
            app.UseHsts();
        }
        
        // تنظیم مسیر فایل‌های استاتیک
        var currentDirectory = Directory.GetCurrentDirectory();
        var frontPath = Path.Combine(currentDirectory, "Front");
        env.WebRootPath = frontPath;

        app.UseDefaultFiles();
        app.UseStaticFiles();

        app.UseRouting();

        // تعریف endpointها به صورت Minimal API
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapGet("/sum", (int a, int b) => a + b);
            endpoints.MapGet("/sub", (int a, int b) => a - b);
            endpoints.MapGet("/mul", (int a, int b) => a * b);
            endpoints.MapGet("/division", (int a, int b) => a / b);

            endpoints.MapGet("/Exception", async context =>
            {
                var errorMessage = context.Request.Query["message"].ToString();
                throw new ApplicationException(!string.IsNullOrEmpty(errorMessage) ? errorMessage : "Error");
            });
        });
    }
}





using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

public class Program
{
    public static void Main(string[] args)
    {
        CreateHostBuilder(args).Build().Run();
    }

    public static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureWebHostDefaults(webBuilder =>
            {
                // استفاده از Startup.cs برای راه‌اندازی برنامه
                webBuilder.UseStartup<Startup>();
            });
}
