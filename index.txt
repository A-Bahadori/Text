try
{
    Console.WriteLine("Word File Processing Test Program");
    
    // File path
    Console.Write("Enter the Word file path: ");
    string filePath = Console.ReadLine().Trim();
    
    if (!File.Exists(filePath))
    {
        Console.WriteLine("The specified file was not found.");
        return;
    }
    
    // Create IFormObject
    IFormObject formObject = CreateFormObjectFromFile(filePath);
    
    // Instantiate the processor class
    var processor = new YourProcessor(); // The class containing GetWordFormat
    
    // Set output type (Word or PDF)
    Console.Write("Should the output be PDF? (y/n): ");
    bool isPdf = Console.ReadLine().Trim().ToLower() == "y";
    
    // Call the processing method
    byte[] result = processor.GetWordFormat(formObject, Path.GetFileName(filePath), isPdf);
    
    // Determine output file extension
    string extension = isPdf ? ".pdf" : ".docx";
    
    // Determine output path
    string outputPath = Path.Combine(
        Path.GetDirectoryName(filePath),
        Path.GetFileNameWithoutExtension(filePath) + "_output" + extension
    );
    
    // Save the result
    File.WriteAllBytes(outputPath, result);
    
    Console.WriteLine("File processed successfully and saved to:");
    Console.WriteLine(outputPath);
}
catch (Exception ex)
{
    Console.WriteLine($"Error: {ex.Message}");
    Console.WriteLine(ex.StackTrace);
}

Console.WriteLine("Press any key to exit.");
Console.ReadKey();

// Function to create an IFormObject from a file
static IFormObject CreateFormObjectFromFile(string filePath)
{
    // Depending on the IFormObject implementation, this will vary
    // Example implementation:
    byte[] fileBytes = File.ReadAllBytes(filePath);
    
    // Assume FormObjectImplementation implements IFormObject
    var formObject = new FormObjectImplementation();
    formObject.SetFileContent(fileBytes);
    formObject.SetFileName(Path.GetFileName(filePath));
    
    return formObject;
}
